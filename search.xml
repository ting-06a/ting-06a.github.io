<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java(浅浅记录)</title>
      <link href="/2025/07/10/java/"/>
      <url>/2025/07/10/java/</url>
      
        <content type="html"><![CDATA[<h1 id="引入："><a href="#引入：" class="headerlink" title="引入："></a>引入：</h1><p>面向对象的编程，或者称为 OOP</p><ul><li>OOP理念是当设计一个程序时，应该先考虑程序的组成部分（对象），而不是程序的任务。</li></ul><p>要让计算机<strong>执行程序指定的任务</strong>，通常要分两步走：①执行一个编译命令；②执行运行命令</p><p>当<strong>编译一个程序时</strong>会发生：大多数编译器将源代码转换为<u>目标代码</u>，而Java编译器将源代码转换为字节码。</p><ul><li>目标代码是处理器可以阅读和理解的二进制格式指令的正式术语。</li></ul><p><strong>可移植性</strong>可指硬件，也可指软件；</p><ul><li><p>若一个软件可以在许多不同类型的计算机上使用，则它是可移植的。</p></li><li><p>目标代码的可移植性不高。因为目标代码由二进制格式的指令组成，这些二进制格式的指令与特定类型的计算机有密切的关系。</p></li><li><p>Java 的发明者试图通过在源代码和目标代码层级之间引入<strong>字节码</strong>层级来解决目标代码中固有的缺乏可移植性的问题。</p><ul><li><p>Java 编译器不会一直编译到目标代码，而是编译到字节码，以拥有目标代码和源代码的最佳特性。</p></li><li><p>像源代码一样，字节码是通用的，因此它可以在任何类型的计算机上运行。</p></li></ul></li></ul><p>当一个Java程序被编译后再运行时，字节码被计算机的<u><strong>字节码解释器程序</strong></u>翻译成目标代码。</p><ul><li>该 字节码解释器程序，即Java虚拟机，简称JVM，可将Java字节码翻译成目标代码。</li></ul><p>中间件：将另外两个通常难相互沟通的软件组件进行连接的软件。</p><p>Oracle把Java编译器与JVM捆绑在一起，将捆绑的软件称为JDK;</p><ul><li>JDK: Java development kit, Java开发工具包</li></ul><p>算法是解决一个问题的分布过程。</p><p>保留字是由Java 语言为特定目的而定义的字，不能被程序员重新定义为其他意思。这意味着程序员在他们的程序中选择名称时不能使用保留字。<br>在Java中，保留字和关键字是一样的，但是在一些编程语言中有着细微的区别——这两个术语都是指由编程语言定义的单词，但是关键字可以由程序员重新定义，而保留字不能由程序员重新定义。<br>保留字or关键字class是一个标记，表示类的开始；对于单类程序来说，class也表示程序的开始。<br>public是访问修饰符，修改了类的权限。</p><p>System.out.println 语句告诉计算机要输出一些东西。System指的是计算机。System.out指的是计算机系统的输出部分，即计算机的屏幕。println（全称为print line，输出行)指的是Java的println方法。</p><p>在Java中，String是一个数据类型。<br>Java编程风格惯例类名以大写字母开头。</p><h2 id="编译-运行"><a href="#编译-运行" class="headerlink" title="编译&amp;运行"></a>编译&amp;运行</h2><p>法一：可以先javac进行编译，生成.class的字节码文件，再用java运行该字节码文件；</p><p><img src="/./Java-picture/image-20241025235048141.png" alt="image-20241025235048141"></p><p>法二：（对于java 11开始的版本）可以直接java 加xxx.java 在没先生成.class的情况下运行；</p><p><img src="/./Java-picture/image-20241025234412314.png" alt="image-20241025234412314"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>计算机系统是计算机运行所必需的所有部件以及这些部件之间的连接。更具体地说，计算机</li></ul><p>系统由CPU、主存储器、辅助存储器和I&#x2F;O设备组成。</p><ul><li>程序员编写算法，作为编程问题的首次尝试解决方案。</li><li>算法是用伪代码编写的，与编程语言代码相似，只是不需要精确的句法（单词、语法和标点符号）。</li><li>源代码是编程语言指令的正式术语。</li><li>目标代码是一组二进制编码的指令，可由计算机直接执行。</li><li>大多数非Java编译器将源代码编译为目标代码。</li><li>Java编译器从源代码编译为字节码。</li><li>当一个Java程序运行时，Java虚拟机将程序的字节码翻译成目标代码。</li><li>起初，Sun公司开发Java是为了用于智能家用电器软件。</li><li>为了加快开发速度，Java程序员经常使用集成开发环境，但也可以使用纯文本编辑器和“命令提示符”窗口。</li></ul><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="主类、保留字、其它基础"><a href="#主类、保留字、其它基础" class="headerlink" title="主类、保留字、其它基础"></a>主类、保留字、其它基础</h2><p>Java程序的<strong>主类</strong>是程序运行的入口，是程序开始执行的地方。</p><p>通常，我们在主类中定义一个名为<strong>main</strong>的静态方法，作为程序的启动点。</p><ul><li><p>它的定义格式固定，必须为<strong>public static void main(String[] args)</strong>。</p><ul><li><p><strong>public</strong>（公开）是访问修饰符，修改了类的权限。</p><p>此处public 指定了谁可以访问main方法（所有人）</p><p>(因为main是所有Java程序的起点，故必须为可公开访问的)</p></li><li><p><strong>static</strong>（静态）指定了如何访问main方法。若为非static方法，必须在访问它之前做一些额外的工作。<br>而一个static方法可以立即被访问，而不需要做额外的工作。<br>（因为main 是所有Java程序的起点，它必须能被立即访问，因此它需要static 这个词。）</p></li><li><p><strong>void</strong>（空)。void 表示一个方法什么都不返回。因为main方法不返回任何东西，所以在main方法的标题中使用void。（方法就像一个数学函数——它计算一些东西并返回计算值。）</p></li><li><p>（String[ ] args)     参数args表示，参数类型为String[ ];</p></li><li><p>Java编程风格惯例<strong>类名</strong>以大写字母开头。</p></li></ul></li></ul><p>在Java中，<strong>保留字和关键字</strong>是一样的，但是在一些编程语言中有着细微的区别——这两个术语都是指由编程语言定义的单词，但是关键字可以由程序员重新定义，而保留字不能由程序员重新定义。</p><p><strong>保留字</strong>是由Java 语言为特定目的而定义的字，不能被程序员重新定义为其他意思。这意味着程序员在他们的程序中选择名称时不能使用保留字。</p><p>像保留字or关键字<strong>class</strong>是一个标记，表示类的开始；<br>      对于单类程序来说，class也表示程序的开始。<br><strong>public</strong>是访问修饰符，修改了类的权限。</p><p><strong>System.out.println</strong> 语句告诉计算机要输出一些东西。</p><ul><li>System指的是计算机。<ul><li>System.out指的是计算机系统的输出部分，即计算机的屏幕。</li></ul></li><li>println（全称为print line，输出行，且之后换行)指的是Java的println方法。</li></ul><p>在Java中，String是一个数据类型。</p><p><strong>小结</strong></p><ul><li><p>使用伪代码来编写算法的非正式描述。为变量使用易于理解的名称。缩进从属语句。</p></li><li><p>当你的程序需要输入时，提供一则提示信息，告诉用户要提供什么样的信息。</p></li><li><p>流程图提供了一个可视化的图片，说明程序中的元素是如何关联的，以及在程序执行过程中流经这</p><p>些元素的控制流是怎样的。</p></li><li><p>有三种基本的结构良好的控制流模式：顺序结构、条件结构和循环结构。</p></li><li><p>可以使用if语句的三种形式实现条件执行：if、if-else和if-else if。</p></li><li><p>为所有的循环提供某种终止条件，如计数器、用户查询或哨兵值。</p></li><li><p>如果需要在外循环的每次迭代中重复某些内容，则应使用嵌套循环。</p></li><li><p>使用追踪来深入了解一个算法的作用和调试有逻辑错误的程序。</p></li><li><p>使用更抽象的语言来简洁地描述更大和更复杂的编程操作。</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><strong>什么是类：</strong></p><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和属性。<br><strong>对象</strong>：对象是类的一个实例，有 属性 和 行为 。</p><p>举个例子：</p><ul><li>人是一个 “类”，小明就是人的 “对象” ，女生&#x2F;男生是一个类，你的女朋友&#x2F;男朋友就是一个对象，这个对象的属性有：名字，性别，年龄；行为有：吃饭、睡觉、学习等。</li></ul><p>在Java中对象的状态就是属性，行为通过方法体现，即Java中的对象一般由属性和行为组成。</p><p><strong>怎么定义类</strong>：<br>使用class,声明这个类的名字。<br>eg：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> class Student&#123;</span><br><span class="line">          //声明这个是一个学生类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建对象并且使用对象的属性和方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建对象使用的公式就是：</span><br><span class="line">          类名 对象名 = new 类名();</span><br><span class="line">给对象的属性赋值：</span><br><span class="line">          对象名.属性名 = 值;</span><br><span class="line">使用对象的属性：</span><br><span class="line">          对象名.属性名</span><br><span class="line">调用对象的方法：</span><br><span class="line">          对象名.方法名();</span><br></pre></td></tr></table></figure><p>eg：<img src="./Java-picture/屏幕截图 2024-11-24 090019.png" alt="屏幕截图 2024-11-24 090019" style="zoom: 67%;" /></p><p><strong>关于类：</strong></p><p>如果源文件中有多个类，那么最多有一个类是public类；如果有一个类是public类，那么源文件的名字必须与这个类的名字完全相同，扩展名是.java：如果源文件没有public类，那么源文件的名字只要和某个类的名字相同，并且扩展名是.java就可以了。</p><p><strong>类名</strong>习惯第一个字母大写。<br>一个程序的启动方法（main）应该在一个public类中。<br>main方法本身必须是public的，否则无法访问启动程序。<br>main方法标题： public static void main (String[] args）</p><p>例如：<strong>scanner类</strong>：<br>要在程序顶部包含：import java.util.Scanner;<br>例子：Scanner stdIn &#x3D; new Scanner(System.in);<br><em><strong>new Scanner(System.in)表达式创建一个对象</strong></em>，其中System.in被用于键盘输入。一个对象存储一个数据集合。在本例中，该对象存储用户在键盘上输入字符。stdIn变量是一个引用变量，它被初始化为新创建的Scanner对象的地址。初始化后，stdIn变量允许你进行输入操作。<br>之后可以通过调用nextLine方法来读取和存储一行输入：变量&#x3D;stdIn. nextLine;</p><p>除了调用了Scanncr 类的 nextLine方法(但该方法与其他的scanner方法配合不好，它是唯一处理前导空白的方法）来获得一行输入。还有其他方法来获得不同形式的输入。</p><p>下面是一些方法:</p><ul><li>next()    跳过前导空白，直到找到一个标记。将标记作为一个String值返回。</li><li>nextInt()跳过前导空白，直到找到一个标记。将标记作为一个int值返回。</li><li>nextLong()跳过前导空白，直到找到一个标记。将标记作为一个1ong值返回。</li><li>nextFloat()跳过前导空白，直到找到一个标记。将标记作为一个float 值返回。</li><li>nextDouble()跳过前导空白，直到找到一个标记。将标记作为一个double值返回。</li></ul><p><strong>关于前导空白与标记</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）什么是前导空白？</span><br><span class="line">空白是指所有在显示屏幕或打印机上显示为空白的字符，包括空格字符、制表符和换行符（换行符是通过Enter 键产生的）；</span><br><span class="line">前导空白指的是在输入的左边的空白字符。</span><br><span class="line">（2）next方法是寻找一个标记。什么是标记（token）？</span><br><span class="line">由于next方法通常用于读入一个单词，所以可以把标记看作一个单词。但更正式地说，</span><br><span class="line">-个标记是一串非空格的字符。例如，gecko和53B@a!都是标记，Gila monster 包含了两个标记，而非一个，因为Gila 和monster 之间的空格是一个标记的结束信号。</span><br></pre></td></tr></table></figure><p><strong>Java为每个基本数据类型提供了封装类</strong></p><p>为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java为每 一个基本数据类型都引入了对应的包装类型（wrapper class），；</p><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>方法的调用：</strong><br>像charAt和println方法都采用该语法：<br>引用变量.方法名(参数);<br>charAt():charAt 是指character at，返回一个位于指定位置的字符。<br>在调用charAt方法时，需要在方法调用的括号内插入一个参数（一个索引值)，如：<br>String animal&#x3D;“cow”，则animal.charAt(2）会返回w。在调用length方法时，则不需要在方法调用的括号中插入参数，如：String s1&#x3D;””,则s1.length()返回0.</p><p>在调用一个方法时，总是需要括号，即使它们是空的。若没有括号，编译器就不会知道这是一个方法调用。</p><p>**补充：**使用转义序列（带反斜杠，即\）来输出难以输出的字符，如Tab制表符。<br>引用变量存储一个指向对象的内存地址。一个对象是一个被保护壳包裹的相关数据的集合。<br>String类提供了可用于字符串处理的方法。<br>Scanner类提供了可用于输入的方法。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法：<strong>对象被创建的时候会调用的方法</strong></p><ul><li>对象在被创建的时候，也就是被new的时候，会自动调用构造方法。</li></ul><p><strong>特点：</strong></p><ol><li>构造方法可以有参数，也可以无参数；</li><li>构造方法无返回值，也不需要声明void关键字；</li><li>构造方法名必须和类名相同。</li><li>如果定义的类没有声明构造方法，对象在创建时默认使用空的构造方法。</li></ol><p>例如：![屏幕截图 2024-11-24 090844](.&#x2F;Java-picture&#x2F;屏幕截图 2024-11-24 090844.png)</p><h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><p>基本数据类型: boolean，char，byte，short，int，long，float，double<br>封装类类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double；</p><p>例如，integer与int的关系：<a href="https://blog.csdn.net/chenliguan/article/details/53888018">https://blog.csdn.net/chenliguan/article/details/53888018</a></p><p>Java的文件名由类名加.java拓展名组成；<br>String是数据类型，也可作为类名.<br>在源代码里的数字可以使用下划线来分隔数字，eg：“sum&#x3D;500_000；”表示500000，相当于“500，000”，增加可读性。若要输入数字，此时其中不能带有下划线。<br>变量分为原始变量与引用变量：</p><p>一、<strong>原始变量</strong>：</p><p>原始变量存储的是单一数据，而引用变量存储的是指向数据集合的内存位置。</p><p>1.int，32bit（占用内存），（可存储的数值范围为-20亿到20亿）；<br>2.long，64bit，整形常量后面要带l或者L，因为整数常量的默认类型是int；<br>3.float,32bit,有6位有效数字，浮点数常量后面要带f或者F后缀（因为浮点数常量的默认类型是double）;<br>4.double,64bit，有15位有效数字;<br>（超过15位有效数字则用BigDecimal,可以处理无限数量的有效数字）</p><ul><li>浮点数中必含一个小数点，但小数点右边的数字可选，eg：8.和8.0表同一个浮点常数。</li></ul><p>5.char类型：处理单个字符。</p><ul><li>char的必须用单引号包围，而String字符串类型的要用双引号包围</li></ul><p>6.还有boolean、byte、short类型。</p><p>二、<strong>引用变量</strong>：<br>例如字符串变量。<br>字符串变量保存一个指向字符串对象的内存地址。string对象保存数据–字符串的字符。<br>引用变量是用引用类型来声明的。<br>引用类型是一种提供存储数据集合的类型。<br>字符串是一个引用类型，它提供了一个字符集合的存储。所以在下面的例子中，用String引用类型声明name意味着 name指向字符集合T、h、a、n、h、空格、N、g、u、y、<br>String name &#x3D; “Thanh Nguyen”;<br>String只是众多引用类型中的一种。类、数组和接口都被认为是引用类型。</p><p>“+”运算符可以把字符串or char类型的变量两两连接起来所有命名常量都用保留字final修饰符，表示其值是固定or“最终的”（若程序后面想改final变量的值会报错），在命名常量时最好all字母都大写，且用下划线来分隔，eg定义一个常量：final double SPEED_OF_LIGHT</p><p><strong>算术运算符</strong>：<br>1.简单的算术运算符：+、-、<em>、&#x2F;、%<br>2.自增和自减运算符（++、–）<br>3.复合赋值运算符（+&#x3D;、-&#x3D;、</em>&#x3D;、1&#x3D;、%&#x3D;）。<br>注意：字符串的连接也可以用复合赋值运算符+&#x3D;来连接。<br>4.强制转换运算符：语法为（要转换成的类型)值;注意不会改变原来变量的值。</p><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="结构一：if"><a href="#结构一：if" class="headerlink" title="结构一：if"></a>结构一：if</h3><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>例子：<br>Car car1;   引用变量声明<br>car1 &#x3D; new Car();    对象实例化<br>car1.year &#x3D; 2019；  向carl1的year 实例变量赋值 2019<br>第一条语句是car1引用变量的一个变量声明，它在内存中为car1引用变量分配了空间，即只是引用变量本身，而不是一个对象。最终，car1引用变量将持有一个对象的地址，但是因为还没有为它创建对象故还无合法的地址…(续见下图）<br><img src="/./Java-picture/SAVE_20241116_095926.jpg" alt="SAVE_20241116_095926"></p><p>（垃圾，对于没有初始化声明的变量，初始值被称为“垃圾值”，因为它的实际值是未知的。用问号来表示“垃圾值”。)</p><p><strong>引用赋值</strong>：</p><p>将一个引用变量赋值给另一个引用变量的结果是，两个引用变量都指向同一个对象。</p><ul><li>why？</li><li>因为引用变量存储了地址，实际上是把右边引用变量的地址赋给了左边的引用变量。所以在赋值之后，这两个引用变量保存相同的地址，这意味着它们引用的是同一个对象。</li><li>例子：</li></ul><p><img src="/./Java-picture/SAVE_20241116_095933.jpg" alt="SAVE_20241116_095933"></p><p>如果一个无法访问的对象持续存在并占用计算机内存的空间，这就被称为<strong>内存泄漏</strong>。</p><ul><li>内存泄漏可能发生在执行过程中分配内存的计算机程序中。</li></ul><p><strong>当把一个引用传递给一个方法时，该方法能够修改被引用的对象。</strong><br> 例如：有个交换两个Person对象的名称的方法swapPerson：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`public void swapPerson（Person otherPerson）`</span><br><span class="line">`&#123;String temp;`</span><br><span class="line">`temp = otherPerson.name;`</span><br><span class="line">`otherPerson.name = this.name;`</span><br><span class="line">`this.name = temp;`</span><br><span class="line">`&#125;// swapPerson结束`</span><br></pre></td></tr></table></figure><p>则运用eg：person1.swapPerson(person2); 可使得person1与2的name互换。</p><p><strong>方法调用链</strong>：一条语句中连续调用几个方法。<br>例如可以将：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nathancar.setMake(&quot;Audi&quot;);</span><br><span class="line">nathancar.setYear(2020);</span><br></pre></td></tr></table></figure><p>写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nathanCar.setMake(&quot;Audi&quot;).setYear(2020);</span><br></pre></td></tr></table></figure><p>方法调用链在默认情况下是不工作的。如果你想为同一个类中的方法启用方法调用链，你需要在每个方法定义中加入以下两项内容。（P261）<br>（1）方法主体的最后一行应该通过指定return this;来返回调用对象。<br>（2）在方法标题中，返回类型应该是方法的类名。</p><p>一般来说，要使一个方法可链接，需要做以下两件事：<br>（1）在方法标题中，指定返回类型为潜在的后续方法的类。<br>（2）在方法的主体中加入如下内容：<br>return &lt;对将调用以下方法的对象的引用&gt;；<br>例如：ch &#x3D; stdIn.nextLine().charAt(0);<br>stdln变量是对Scanner类的一个对象的引用。它调用Scanner的nextLine方法，该方法返回一个对String类对象的引用。然后该对象调用String的charAt方法，该方法返回一个字符。</p><h2 id="重载方法、构造函数"><a href="#重载方法、构造函数" class="headerlink" title="重载方法、构造函数"></a>重载方法、构造函数</h2><p><strong>重载方法</strong>是同一个类中的两个或多个方法，它们使用相同的名称来表示它们在不同的上下文中执行同一种操作。通过不同数量的参数或不同类型的参数来区分它们；参数建立了上下文。</p><p>   when to use ：当要用不同的参数来执行基本相同的任务时。</p><p><strong>签名</strong>：<br>一个方法的名称、参数数量和参数类型的组合被称为该方法的签名；<br>每个不同的方法都有一个不同的签名（所以对于重载方法也是）。</p><p><strong>构造函数</strong>：是一个类方法的实体；<br>           当一个对象被实例化时，它会被自动调用。<br>例如下面是这样一个构造函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Car(String m, int y, String c)</span><br><span class="line">&#123;</span><br><span class="line">this.make = m;</span><br><span class="line">this.year = y;</span><br><span class="line">    this.color = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       正如所看到的，这个构造函数只是将传入的参数值分配给它们相应的实例变量。执行完构造函数后，JVM会将新实例化和初始化的对象的地址返回构造函数被调用的地方。<br>​      例如Car lanceCar&#x3D;new Car(“Ford”,2019，”lime”）声明中，实例化的Car对象的地址被分配给lanceCar引用变量。</p><p><strong>构造函数的几个细节：</strong><br>1.一个构造函数的名称必须与它所关联的类相同。<br>因此，例如Car类的构造函数必须命名为Car，C要大写。<br>2.构造函数标题不使用返回类型。<br>（若让一个构造函数带返回类型，则会被编译器视为一个普通方法而不再是一个构造函数）<br>（止P267）</p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>成员变量，即对象的属性，eg：</p><img src="./Java-picture/屏幕截图 2024-11-24 091144.png" alt="屏幕截图 2024-11-24 091144" style="zoom:67%;" /><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>关于this关键字，你只需要记住它就是指自身，this即代表自己；</p><p>this.属性 访问的是自己的属性<br>this() 访问的就是自己的无参构造方法。</p><img src="./Java-picture/屏幕截图 2024-11-21 105218.png" alt="屏幕截图 2024-11-21 105218" style="zoom:67%;" /><img src="./Java-picture/屏幕截图 2024-11-21 104637.png" alt="屏幕截图 2024-11-21 104637" style="zoom:67%;" /><p>注意：若把上述<em>this.name &#x3D; name</em>改为 <em>name &#x3D; name</em>，那么最终的结果就变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am</span><br><span class="line">null</span><br></pre></td></tr></table></figure><ul><li>此例中，this()调用的是Person自己的无参构造方法，this.name访问的是Person对象自身的name，而方法参数中的name则表示方法传入的值。</li></ul><p>运用this的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package step3;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    String name = sc.next();</span><br><span class="line">    int age = sc.nextInt();</span><br><span class="line">    String sex = sc.next();</span><br><span class="line">    Person p = new Person(name,age,sex);</span><br><span class="line">    p.display();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">  String name = &quot;张三&quot;;</span><br><span class="line">  int age = 18; </span><br><span class="line">  String sex = &quot;男&quot;;</span><br><span class="line">  /********** Begin **********/</span><br><span class="line">  public Person(String name,int age,String sex)&#123;</span><br><span class="line">​    this(age);</span><br><span class="line">​    this.name = name;</span><br><span class="line">​    this.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line">  public Person(int age)&#123;</span><br><span class="line">​    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  public void display()&#123;</span><br><span class="line">​    String name = &quot;李四&quot;;</span><br><span class="line">​    int age = 11;</span><br><span class="line">​    String sex = &quot;男&quot;;</span><br><span class="line">​    System.out.println(&quot;name：&quot; + this.name);</span><br><span class="line">​    System.out.println(&quot;age：&quot; + this.age);</span><br><span class="line">​    System.out.println(&quot;sex：&quot; + this.sex);</span><br><span class="line">  &#125;</span><br><span class="line">  /********** End **********/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入：<br>baby，45，女<br>预期输出：<br>name：baby<br>age：45<br>sex：女</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h4><ol><li><p>static是静态的意思，是一个修饰符，就像是一个形容词，是用来形容类，变量，方法的。</p></li><li><p>static修饰变量，这个变量就变成了静态变量，修饰方法这个方法就成了静态方法。</p></li><li><p>static关键字方便在没有创建对象的情况下来进行调用（方法&#x2F;变量）。</p></li><li><p>static关键字你可以理解为是一个形容词，一般是用来形容类、方法、变量，代码块，还有一个作用是用来静态导包。</p></li><li><p>注意： 在Java中是不能用static关键字修饰局部变量的，</p></li></ol><h4 id="具体运用："><a href="#具体运用：" class="headerlink" title="具体运用："></a><strong>具体运用：</strong></h4><p><strong>1.修饰变量</strong>（对比）<br>不使用static关键字访问对象的属性：</p><img src="./Java-picture/屏幕截图 2024-11-24 092609.png" alt="屏幕截图 2024-11-24 092609" style="zoom:50%;" /><p>使用static关键字访问对象的属性：</p><img src="./Java-picture/屏幕截图 2024-11-24 092650.png" alt="屏幕截图 2024-11-24 092650" style="zoom:50%;" /><ul><li>注意：如果一个类的成员变量被static修饰了，那么所有该类的对象都共享这个变量。无论这个类实例化多少对象，它的静态变量只有一份拷贝。</li></ul><p><strong>2.修饰方法</strong></p><p>用static关键字修饰的方法叫做静态方法。静态方法我们已经用过，它有一个特点相信你已经很熟悉，那就是不需要创建对象就可以直接使用。<br>如：</p><img src="./Java-picture/屏幕截图 2024-11-24 092836.png" alt="屏幕截图 2024-11-24 092836" style="zoom: 50%;" /><p><strong>注意：</strong></p><ul><li>静态方法不能使用类的非静态变量；</li><li>静态方法可以直接调用静态方法，但是它要调用普通方法也只能通过对象的实例才能调用。例如：<img src="./Java-picture/屏幕截图 2024-11-24 093222.png" alt="屏幕截图 2024-11-24 093222" style="zoom: 67%;" /></li></ul><p><strong>3.静态代码块</strong></p><p>![屏幕截图 2024-11-24 093529](.&#x2F;Java-picture&#x2F;屏幕截图 2024-11-24 093529.png)</p><p>我们在main方法中没有编写任何代码，可是运行的时候，程序还是会输出我被调用了，由此我们可以发现静态代码块是不需要依赖main方法就可以独立运行的。</p><p>1.关于<strong>静态代码块</strong>你只需要记住一句话：<strong>在类被加载的时候运行且只运行一次。</strong></p><p>2.静态代码块中变量和方法的调用也遵守我们之前所说的规则，即只能直接调用静态的属性和方法。</p><p>static运用的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MyClass &#123;</span><br><span class="line">    static int i = 10;</span><br><span class="line">    static &#123;</span><br><span class="line">        i = 20;</span><br><span class="line">        System.out.println(&quot;In Static&quot;);</span><br><span class="line">        System.out.println(&quot;在static代码块里，i的值为：&quot;+i);</span><br><span class="line">    &#125;</span><br><span class="line">    public MyClass() &#123;</span><br><span class="line">        System.out.println(&quot;MyClass()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public MyClass(int i) &#123;</span><br><span class="line">        System.out.println(&quot;MyClass(int)&quot;);</span><br><span class="line">        this.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class TestMain &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        MyClass mc1 = new MyClass();</span><br><span class="line">        System.out.println(mc1.i);</span><br><span class="line">        MyClass mc2 = new MyClass(10);</span><br><span class="line">        System.out.println(mc2.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In Static</span><br><span class="line">在static代码块里，i的值为：20</span><br><span class="line">MyClass()</span><br><span class="line">20</span><br><span class="line">MyClass(int)</span><br><span class="line">10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
